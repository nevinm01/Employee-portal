import {
  require_react
} from "./chunk-RLJ2RCJQ.js";
import {
  __export,
  __toESM
} from "./chunk-DC5AMYBS.js";

// node_modules/informed/dist/esm/_virtual/_rollupPluginBabelHelpers.js
function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e, n, i, u, a = [], f = true, o = false;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t) return;
        f = false;
      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true) ;
    } catch (r2) {
      o = true, n = r2;
    } finally {
      try {
        if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function _toPrimitive(t, r) {
  if ("object" != typeof t || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == typeof i ? i : String(i);
}
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      var F = function() {
      };
      return {
        s: F,
        n: function() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function(e) {
          throw e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return {
    s: function() {
      it = it.call(o);
    },
    n: function() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function(e) {
      didErr = true;
      err = e;
    },
    f: function() {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

// node_modules/informed/dist/esm/components/ArrayField.js
var import_react16 = __toESM(require_react(), 1);

// node_modules/informed/dist/esm/components/Relevant.js
var import_react8 = __toESM(require_react(), 1);

// node_modules/informed/dist/esm/Context.js
var import_react = __toESM(require_react(), 1);
var FormControllerContext = import_react.default.createContext({});
var FormApiContext = import_react.default.createContext({});
var FormStateContext = import_react.default.createContext({});
var MultistepStepContext = import_react.default.createContext();
var MultistepApiContext = import_react.default.createContext();
var MultistepStateContext = import_react.default.createContext();
var ArrayFieldStateContext = import_react.default.createContext();
var ArrayFieldApiContext = import_react.default.createContext();
var ArrayFieldItemApiContext = import_react.default.createContext();
var ArrayFieldItemStateContext = import_react.default.createContext();
var RelevanceContext = import_react.default.createContext();
var RadioGroupContext = import_react.default.createContext();
var ScopeContext = import_react.default.createContext();
var InformedContext = import_react.default.createContext();

// node_modules/informed/dist/esm/hooks/useFormController.js
var import_react2 = __toESM(require_react(), 1);
function useFormController() {
  var formController = (0, import_react2.useContext)(FormControllerContext);
  return formController;
}

// node_modules/informed/dist/esm/hooks/useRelevance.js
var import_react7 = __toESM(require_react(), 1);

// node_modules/informed/dist/esm/hooks/useStateWithGetter.js
var import_react4 = __toESM(require_react(), 1);

// node_modules/informed/dist/esm/hooks/useEffectOnce.js
var import_react3 = __toESM(require_react(), 1);
var useEffectOnce = function useEffectOnce2(effect) {
  var destroyFunc = (0, import_react3.useRef)();
  var effectCalled = (0, import_react3.useRef)(false);
  var renderAfterCalled = (0, import_react3.useRef)(false);
  var _useState = (0, import_react3.useState)(0), _useState2 = _slicedToArray(_useState, 2);
  _useState2[0];
  var setVal = _useState2[1];
  if (effectCalled.current) {
    renderAfterCalled.current = true;
  }
  (0, import_react3.useEffect)(function() {
    if (!effectCalled.current) {
      destroyFunc.current = effect();
      effectCalled.current = true;
    }
    setVal(function(val) {
      return val + 1;
    });
    return function() {
      if (!renderAfterCalled.current) {
        return;
      }
      if (destroyFunc.current) {
        destroyFunc.current();
      }
    };
  }, []);
};

// node_modules/informed/dist/esm/hooks/useStateWithGetter.js
function useStateWithGetter(initial) {
  var ref = (0, import_react4.useRef)();
  var mounted = (0, import_react4.useRef)(true);
  var _useState = (0, import_react4.useState)(initial), _useState2 = _slicedToArray(_useState, 2), state = _useState2[0], setState = _useState2[1];
  ref.current = state;
  var set = function set2(value) {
    ref.current = value;
    if (mounted.current) setState(value);
  };
  var get = function get2() {
    return ref.current;
  };
  useEffectOnce(function() {
    return function() {
      mounted.current = false;
    };
  });
  return [state, set, get];
}

// node_modules/informed/dist/esm/hooks/useFieldSubscription.js
var import_react6 = __toESM(require_react(), 1);

// node_modules/informed/dist/esm/utils.js
var utils_exports = {};
__export(utils_exports, {
  Elon: () => Elon,
  checkCondition: () => checkCondition,
  computeFieldFromProperty: () => computeFieldFromProperty,
  computeFieldsFromSchema: () => computeFieldsFromSchema,
  createIntlNumberFormatter: () => createIntlNumberFormatter,
  debounce: () => debounce,
  debounceByName: () => debounceByName,
  generateOnBlur: () => generateOnBlur,
  generateOnChange: () => generateOnChange,
  generateOnFocus: () => generateOnFocus,
  generateValidationFunction: () => generateValidationFunction,
  generateValue: () => generateValue,
  getParentPath: () => getParentPath,
  getSchemaPathFromJsonPath: () => getSchemaPathFromJsonPath,
  informedFormat: () => informedFormat,
  informedFormatter: () => informedFormatter,
  informedParse: () => informedParse,
  isChild: () => isChild,
  sanitize: () => sanitize,
  unwrap: () => unwrap,
  uuidv4: () => uuidv4,
  validateAjvSchema: () => validateAjvSchema,
  validateMax: () => validateMax,
  validateMaxLength: () => validateMaxLength,
  validateMin: () => validateMin,
  validateMinLength: () => validateMinLength,
  validateRequired: () => validateRequired,
  validateYupField: () => validateYupField,
  validateYupSchema: () => validateYupSchema,
  yupToFormError: () => yupToFormError,
  yupToFormErrors: () => yupToFormErrors
});

// node_modules/informed/dist/esm/debug.js
function selectColor(namespace, colors) {
  var hash = 0;
  for (var i = 0; i < namespace.length; i++) {
    hash = (hash << 5) - hash + namespace.charCodeAt(i);
    hash |= 0;
  }
  return colors[Math.abs(hash) % colors.length];
}
function formatNodeArgs(args, config) {
  var name = config.namespace;
  if (config.useColors) {
    var c = config.color;
    var colorCode = "\x1B[3" + (c < 8 ? c : "8;5;" + c);
    var prefix = "  ".concat(colorCode, ";1m").concat(name, " \x1B[0m");
    args[0] = prefix + args[0].split("\n").join("\n" + prefix);
  } else {
    args[0] = name + " " + args[0];
  }
}
function formatBrowserArgs(args, config) {
  args[0] = (config.useColors ? "%c" : "") + config.namespace;
  if (!config.useColors) {
    return;
  }
  var c = "color: " + config.color;
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if (match === "%%") {
      return;
    }
    index++;
    if (match === "%c") {
      lastC = index;
    }
  });
  args.splice(lastC, 0, c);
}
var browserColors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"];
function loadBrowser() {
  var namespaces;
  try {
    namespaces = localStorage.getItem("debug");
  } catch (error) {
  }
  if (!namespaces && typeof process !== "undefined" && "env" in process) {
    namespaces = process.env.DEBUG;
  }
  return {
    namespaces: namespaces || "",
    colors: browserColors,
    useColors: true,
    formatArgs: formatBrowserArgs
  };
}
function loadNode() {
  return {
    namespaces: process.env.DEBUG || "",
    colors: [6, 2, 3, 4, 5, 1],
    useColors: true,
    formatArgs: formatNodeArgs
  };
}
function createLogger() {
  var prefix = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
  var config = arguments.length > 1 ? arguments[1] : void 0;
  return function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (prefix) {
      args.unshift(prefix);
    }
    var matches = config.namespaces.split(",").map(function(namespace) {
      if (namespace[namespace.length - 1] === "*") {
        return new RegExp("^" + namespace.slice(0, namespace.length - 1) + ".*$");
      }
      return new RegExp("^" + namespace + "$");
    });
    var match = matches.some(function(regex) {
      return regex.test(prefix);
    });
    var conf = {
      color: selectColor(prefix, config.colors),
      namespace: prefix,
      useColors: config.useColors
    };
    if (match) {
      var _console;
      config.formatArgs(args, conf);
      (_console = console).log.apply(_console, args);
    }
  };
}
function nodeLogger(prefix) {
  return createLogger(prefix, loadNode());
}
function browserLogger(prefix) {
  return createLogger(prefix, loadBrowser());
}
var Debug = function Debug2(prefix) {
  if (typeof process === "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs) {
    return browserLogger(prefix);
  } else if (typeof window !== "undefined" && typeof window.navigator !== "undefined" && window.navigator.product === "ReactNative" && typeof global !== "undefined" && __DEV__ === true) {
    console.log("informed:debug: Detected React Native Environment");
    process.type = "renderer";
    if (!window.localStorage || !window.localStorage.getItem) {
      window.localStorage = {
        debug: global.DEBUG_INFORMED || "",
        getItem: function getItem() {
          return global.DEBUG_INFORMED || "";
        }
      };
    }
    return browserLogger(prefix);
  } else {
    return nodeLogger(prefix);
  }
};

// node_modules/informed/dist/esm/ObjectMap.js
var debug = Debug("informed:ObjMap	");
var ldtoPath = function ldtoPath2() {
  var path = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  return String.prototype.replace.call(path, /\['(.+?)'\]/g, ".$1").split(/[,[\].]+?/).filter(Boolean);
};
var ldget = function ldget2(obj) {
  var path = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
  var defaultValue = arguments.length > 2 ? arguments[2] : void 0;
  var result = String.prototype.replace.call(path, /\['(.+?)'\]/g, ".$1").split(/[,[\].]+?/).filter(Boolean).reduce(function(res, key) {
    return res !== null && res !== void 0 ? res[key] : res;
  }, obj);
  return result === void 0 || result === obj ? defaultValue : result;
};
var ldSwap = function ldSwap2(arr, a, b) {
  if (arr[a] && arr[b]) {
    var oldA = arr[a];
    var oldB = arr[b];
    arr[a] = oldB;
    arr[b] = oldA;
  } else {
    console.warn("Attempted to swap ".concat(a, " with ").concat(b, " but one of them does not exist :("));
  }
};
var ldmove = function ldmove2(arr, fromIndex, toIndex) {
  if (Array.isArray(arr) && fromIndex < arr.length && toIndex < arr.length) {
    var item = arr.splice(fromIndex, 1)[0];
    arr.splice(toIndex, 0, item);
  } else {
    console.warn("Attempted to move from ".concat(fromIndex, " to ").concat(toIndex, " but the operation is not valid."));
  }
};
var parentPath = function parentPath2(path) {
  return ".".concat(path).replace(/(.*)[.[].*/, "$1").replace(/\./, "");
};
var pathKey = function pathKey2(path) {
  return path.replace(parentPath(path), "").replace(/\./, "");
};
var ldhas = function ldhas2(obj, path) {
  var pPath = parentPath(path);
  var key = pathKey(path);
  var parentObj = pPath ? ldget(obj, pPath) : obj;
  return !!(parentObj && Object.hasOwnProperty.call(parentObj, key.replace(/\[(.*)\]/, "$1")));
};
var ldset = function ldset2(obj) {
  var path = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
  var val = arguments.length > 2 ? arguments[2] : void 0;
  String.prototype.replace.call(path, /\['(.+?)'\]/g, ".$1").split(/[,[\].]+?/).filter(Boolean).reduce(function(res, key, i, arr) {
    if (i === arr.length - 1) {
      res[key] = val;
      return res[key];
    }
    if (_typeof(res[key]) !== "object") {
      if (Number.isInteger(+arr[i + 1])) {
        res[key] = [];
      } else {
        res[key] = {};
      }
      return res[key];
    }
    if (Number.isInteger(+arr[i + 1]) && !Array.isArray(res[key])) {
      res[key] = [];
    }
    return res[key];
  }, obj);
};
var ldunset = function ldunset2(obj) {
  var path = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
  var found = false;
  String.prototype.replace.call(path, /\['(.+?)'\]/g, ".$1").split(/[,[\].]+?/).filter(Boolean).reduce(function(res, key, i, arr) {
    if (res === void 0) {
      return res;
    }
    if (i === arr.length - 1) {
      delete res[key];
      found = true;
      return res[key];
    }
    return res[key];
  }, obj);
  return found;
};
var ldpullAt = function ldpullAt2(obj) {
  var path = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
  var pulled;
  String.prototype.replace.call(path, /\['(.+?)'\]/g, ".$1").split(/[,[\].]+?/).filter(Boolean).reduce(function(res, key, i, arr) {
    if (res === void 0) {
      return res;
    }
    if (i === arr.length - 1 && Array.isArray(res)) {
      pulled = res.splice(key, 1);
      return res[key];
    }
    return res[key];
  }, obj);
  return pulled;
};
var pathToArrayElem = function pathToArrayElem2(path) {
  var pathArray = ldtoPath(path);
  return Number.isInteger(+pathArray[pathArray.length - 1]);
};
var ObjectMap = function() {
  function ObjectMap2() {
    _classCallCheck(this, ObjectMap2);
  }
  _createClass(ObjectMap2, null, [{
    key: "empty",
    value: function empty(object) {
      for (var i in object) return false;
      return true;
    }
  }, {
    key: "get",
    value: function get(object, path) {
      var val = ldget(object, path);
      return val;
    }
  }, {
    key: "has",
    value: function has(object, path) {
      return ldhas(object, path);
    }
  }, {
    key: "set",
    value: function set(object, path, value) {
      if (value !== void 0) {
        debug("Setting", path, value);
        ldset(object, path, value);
      } else {
        if (pathToArrayElem(path) && ObjectMap2.get(object, path) !== void 0) {
          debug("Special case SETTING", path, "to undefined");
          ldset(object, path, void 0);
          var pathArray = ldtoPath(path);
          pathArray = pathArray.slice(0, pathArray.length - 1);
          cleanup(object, pathArray);
        } else if (!pathToArrayElem(path) && ObjectMap2.get(object, path) !== void 0) {
          debug("Special case REMOVING", path, "from object completley");
          ObjectMap2["delete"](object, path);
        }
      }
    }
  }, {
    key: "delete",
    value: function _delete(object, path) {
      debug("DELETE", path);
      if (pathToArrayElem(path)) {
        debug("ARRAY PATH", path);
        this.pullOut(object, path);
      } else {
        ldunset(object, path);
      }
      var pathArray = ldtoPath(path);
      pathArray = pathArray.slice(0, pathArray.length - 1);
      cleanup(object, pathArray);
      debug("DELETED", path);
    }
    // Very important ;)
  }, {
    key: "pullOut",
    value: function pullOut(object, path) {
      var pathArray = ldtoPath(path);
      var index = pathArray[pathArray.length - 1];
      pathArray = pathArray.slice(0, pathArray.length - 1);
      debug("Pulling out:", pathArray, "index", index);
      var arr = ldget(object, pathArray);
      debug("Array Before", JSON.stringify(arr));
      if (Array.isArray(arr)) {
        ldpullAt(arr, index);
      }
      debug("Array After", JSON.stringify(arr));
      cleanup(object, pathArray);
    }
  }, {
    key: "purge",
    value: function purge(obj) {
      var newObj = Array.isArray(obj) ? [] : {};
      Object.keys(obj).forEach(function(key) {
        if (_typeof(obj[key]) === "object") {
          newObj[key] = ObjectMap2.purge(obj[key]);
          if (Object.keys(newObj[key]).length === 0) {
            delete newObj[key];
          }
        } else if (obj[key] !== void 0) {
          newObj[key] = obj[key];
        }
      });
      return newObj;
    }
  }, {
    key: "swap",
    value: function swap(object, path, i, j) {
      debug("Swaping out out: ".concat(path, ", ").concat(i, ", ").concat(j));
      var arr = ldget(object, path);
      debug("Array", arr);
      if (Array.isArray(arr)) {
        ldSwap(arr, i, j);
      }
    }
  }, {
    key: "move",
    value: function move(object, path, fromIndex, toIndex) {
      console.log("Moving:", path, fromIndex, "to", toIndex);
      var arr = ldget(object, path);
      console.log("Array before move", JSON.stringify(arr));
      ldmove(arr, fromIndex, toIndex);
      console.log("Array after move", JSON.stringify(arr));
    }
  }]);
  return ObjectMap2;
}();
function cleanup(obj, path) {
  if (path.length === 0) {
    return;
  }
  var object = ldget(obj, path);
  if (Array.isArray(object) ? object.every(function(e) {
    return e == null;
  }) : JSON.stringify(object) === "{}") {
    ldunset(obj, path);
  }
  cleanup(obj, path.slice(0, path.length - 1));
}

// node_modules/informed/dist/esm/proxy.js
var OWN_KEYS_SYMBOL = Symbol("own keys");
var ORIG_SYMBOL = Symbol("original object");
var PROXY = "p";
var AFFECTED = "a";
var CACHE = "c";
var getProto = Object.getPrototypeOf;
var objectsToTrack = /* @__PURE__ */ new WeakMap();
function shouldTrack(obj) {
  if (objectsToTrack.has(obj)) {
    return objectsToTrack.get(obj);
  }
  return obj && (getProto(obj) === Object.prototype || getProto(obj) === Array.prototype);
}
function isObject(obj) {
  return _typeof(obj) === "object" && obj !== null;
}
function isOwnKeysChanged(origObj, nextObj) {
  var origKeys = Reflect.ownKeys(origObj);
  var nextKeys = Reflect.ownKeys(nextObj);
  return origKeys.length !== nextKeys.length || origKeys.some(function(k, i) {
    return k !== nextKeys[i];
  });
}
function createProxyHandler(origObj) {
  function recordUsage(h, key) {
    var used = h[AFFECTED].get(origObj);
    if (!used) {
      used = /* @__PURE__ */ new Set();
      h[AFFECTED].set(origObj, used);
    }
    used.add(key);
  }
  return {
    get: function get(target, key) {
      if (key === ORIG_SYMBOL) {
        return origObj;
      }
      if (key === "toJSON") {
        return function toJSON() {
          return target;
        };
      }
      var usedKey = key;
      var value = target[String(key)];
      if (typeof key === "string" && key.indexOf(".") !== -1 && !(key in target)) {
        var _ObjectMap$get;
        value = (_ObjectMap$get = ObjectMap.get(target, key)) !== null && _ObjectMap$get !== void 0 ? _ObjectMap$get : value;
        usedKey = "$key:".concat(key);
      }
      recordUsage(this, usedKey);
      return createDeepProxy(value, this[AFFECTED], this[CACHE]);
    },
    has: function has(target, key) {
      recordUsage(this, key);
      return key in target;
    },
    ownKeys: function ownKeys2(target) {
      recordUsage(this, OWN_KEYS_SYMBOL);
      return Reflect.ownKeys(target);
    }
  };
}
function createDeepProxy(target, affected, cache) {
  if (!shouldTrack(target)) return target;
  var proxyHandler = cache.get(target);
  if (!proxyHandler) {
    proxyHandler = createProxyHandler(target);
    proxyHandler[PROXY] = new Proxy(target, proxyHandler);
    cache.set(target, proxyHandler);
  }
  proxyHandler[AFFECTED] = affected;
  proxyHandler[CACHE] = cache;
  return proxyHandler[PROXY];
}
function equal(a, b) {
  if (a === b) return true;
  if (a && b && _typeof(a) == "object" && _typeof(b) == "object") {
    if (a.constructor !== b.constructor) return false;
    var length, i, keys;
    if (Array.isArray(a)) {
      length = a.length;
      if (length != b.length) return false;
      for (i = length; i-- !== 0; ) if (!equal(a[i], b[i])) return false;
      return true;
    }
    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length) return false;
    for (i = length; i-- !== 0; ) if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
  }
  return a !== a && b !== b;
}
function isDeepChanged(origObj, nextObj, affected) {
  if (Object.is(origObj, nextObj) && !isObject(origObj)) {
    return false;
  }
  if (!isObject(origObj) || !isObject(nextObj)) {
    return true;
  }
  var used = affected.get(origObj);
  if (!used) {
    return true;
  }
  var _iterator = _createForOfIteratorHelper(used), _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var key = _step.value;
      var isChanged = key === OWN_KEYS_SYMBOL ? isOwnKeysChanged(origObj, nextObj) : isDeepChanged(origObj[key], nextObj[key], affected);
      if (typeof key === "string" && /^\$key:/.test(key)) {
        var parsedKey = key.replace(/^\$key:/, "");
        var origValue = ObjectMap.get(origObj, parsedKey);
        var nextValue = ObjectMap.get(nextObj, parsedKey);
        isChanged = !equal(origValue, nextValue);
      }
      if (isChanged) {
        return isChanged;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return false;
}
function unwrap(obj) {
  if (!shouldTrack(obj)) return obj;
  return ORIG_SYMBOL in obj ? obj[ORIG_SYMBOL] : obj;
}

// node_modules/informed/dist/esm/utils.js
var debug2 = Debug("informed:utils	");
var uuidv4 = function uuidv42() {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
    var r = Math.random() * 16 | 0, v = c == "x" ? r : r & 3 | 8;
    return v.toString(16);
  });
};
var getParentPath = function getParentPath2(name) {
  var parentArrayPath = name.replace(/(.*)[.[].*/, "$1");
  return parentArrayPath;
};
function debounceByName(func) {
  var _this = this;
  var timeout = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 300;
  var timers = {};
  return function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var name = args[0];
    clearTimeout(timers[name]);
    timers[name] = setTimeout(function() {
      func.apply(_this, args);
    }, timeout);
  };
}
function debounce(func) {
  var _this2 = this;
  var timeout = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 300;
  var timer;
  return function() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    clearTimeout(timer);
    timer = setTimeout(function() {
      func.apply(_this2, args);
    }, timeout);
  };
}
var Elon = function() {
  function Elon2() {
    _classCallCheck(this, Elon2);
  }
  _createClass(Elon2, null, [{
    key: "inspect",
    value: (
      // Static functions
      function inspect(validators) {
        return function(value, values) {
          for (var i = 0; i < validators.length; i++) {
            var validator = validators[i];
            var res = validator(value, values);
            if (res) return res;
          }
        };
      }
    )
  }]);
  return Elon2;
}();
var isChild = function isChild2(parent, child) {
  return child.startsWith("".concat(parent, ".")) || child.startsWith("".concat(parent, "["));
};
var generateOnChange = function generateOnChange2(_ref) {
  var fieldType = _ref.fieldType, setValue = _ref.setValue, multiple = _ref.multiple, ref = _ref.ref;
  var setter = function setter2(e) {
    return setValue(e);
  };
  if (fieldType === "text" || fieldType === "textArea" || fieldType === "number") {
    setter = function setter2(e) {
      setValue(e.target.value, e);
    };
  }
  if (fieldType === "select") {
    setter = function setter2(e) {
      var selected = Array.from(ref.current).filter(function(option) {
        return option.selected;
      }).map(function(option) {
        return option.value;
      });
      setValue(multiple ? selected : selected[0] || "", e);
    };
  }
  if (fieldType === "checkbox") {
    setter = function setter2(e) {
      setValue(e.target.checked, e);
    };
  }
  return function(e) {
    setter(e);
  };
};
var generateOnBlur = function generateOnBlur2(_ref2) {
  var setTouched = _ref2.setTouched;
  return function(e) {
    setTouched(true, e);
  };
};
var generateOnFocus = function generateOnFocus2(_ref3) {
  var setFocused = _ref3.setFocused;
  return function(e) {
    setFocused(true, e);
  };
};
var generateValue = function generateValue2(_ref4) {
  var fieldType = _ref4.fieldType, maskedValue = _ref4.maskedValue, multiple = _ref4.multiple, value = _ref4.value;
  switch (fieldType) {
    case "text":
    case "number":
      return !maskedValue && maskedValue !== 0 ? "" : maskedValue;
    case "textArea":
      return !maskedValue ? "" : maskedValue;
    case "select":
      return value || (multiple ? [] : "");
    case "checkbox":
      return !!value;
    default:
      return value;
  }
};
var sanitize = function sanitize2(obj) {
  if (!obj) return obj;
  Object.keys(obj).forEach(function(key) {
    return obj[key] && _typeof(obj[key]) === "object" && sanitize2(obj[key]) || obj[key] === void 0 && delete obj[key];
  });
  return obj;
};
var yupToFormErrors = function yupToFormErrors2(yupError) {
  var errors = {};
  if (yupError.inner) {
    if (yupError.inner.length === 0) {
      ObjectMap.set(errors, yupError.path, yupError.message);
      return;
    }
    var _iterator = _createForOfIteratorHelper(yupError.inner), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var err = _step.value;
        if (!ObjectMap.get(errors, err.path)) {
          ObjectMap.set(errors, err.path, err.message);
        }
      }
    } catch (err2) {
      _iterator.e(err2);
    } finally {
      _iterator.f();
    }
  }
  return errors;
};
var validateYupSchema = function validateYupSchema2(schema, values) {
  try {
    schema.validateSync(values, {
      abortEarly: false
    });
  } catch (e) {
    var formErrors = yupToFormErrors(e);
    return formErrors;
  }
};
var yupToFormError = function yupToFormError2(yupError) {
  if (yupError.inner) {
    if (yupError.inner.length === 0) {
      return;
    }
    var err = yupError.inner[0];
    return err.message;
  }
};
var validateYupField = function validateYupField2(schema, value) {
  try {
    schema.validateSync(value, {
      abortEarly: false
    });
  } catch (e) {
    return yupToFormError(e);
  }
};
var validateAjvSchema = function validateAjvSchema2(validate, data) {
  validate(data);
  var errors = {};
  if (validate.errors) {
    validate.errors.forEach(function(_ref5) {
      var message = _ref5.message, dataPath = _ref5.dataPath, keyword = _ref5.keyword, params = _ref5.params;
      var path = dataPath;
      if (keyword === "required") {
        path = "".concat(path, ".").concat(params.missingProperty);
      }
      path = path.replace(".", "");
      ObjectMap.set(errors, path, message);
    });
  }
  return errors;
};
var validateRequired = function validateRequired2(value, required, getErrorMessage, noFalsy) {
  if (required && (value == null || value === "" || Array.isArray(value) && value.length == 0)) {
    return typeof required === "string" ? required : getErrorMessage("required") || "This field is required";
  }
  if (noFalsy && !value) {
    return typeof noFalsy === "string" ? noFalsy : getErrorMessage("noFalsy") || "This field is required";
  }
};
var validateMax = function validateMax2(value, max, getErrorMessage) {
  if (max != null && value > max) {
    return getErrorMessage("maximum") || "This field should NOT be more than ".concat(max);
  }
  return void 0;
};
var validateMin = function validateMin2(value, min, getErrorMessage) {
  if (min != null && value < min) {
    return getErrorMessage("minimum") || "This field should NOT be less than ".concat(min);
  }
  return void 0;
};
var validateMaxLength = function validateMaxLength2(value, maxLength, getErrorMessage) {
  if (maxLength != null && (value === null || value === void 0 ? void 0 : value.length) > maxLength) {
    return getErrorMessage("maxLength") || "This field should NOT be more than ".concat(maxLength, " characters");
  }
  return void 0;
};
var validateMinLength = function validateMinLength2(value, minLength, getErrorMessage) {
  if (minLength != null && (value === null || value === void 0 ? void 0 : value.length) < minLength) {
    return getErrorMessage("minLength") || "This field should NOT be shorter than ".concat(minLength, " characters");
  }
  return void 0;
};
var validatePattern = function validatePattern2(value, pattern, getErrorMessage) {
  if (pattern != null && !new RegExp(pattern).test(value) && value) {
    return getErrorMessage("pattern") || 'This field should match pattern "'.concat(pattern, '";');
  }
  return void 0;
};
var generateValidationFunction = function generateValidationFunction2(validationFuncRef, yupSchema, _ref6) {
  var required = _ref6.required, noFalsy = _ref6.noFalsy, minimum = _ref6.minimum, maximum = _ref6.maximum, minLength = _ref6.minLength, maxLength = _ref6.maxLength, pattern = _ref6.pattern, getErrorMessage = _ref6.getErrorMessage, validateModified = _ref6.validateModified, fieldApi = _ref6.fieldApi, formController = _ref6.formController, scope = _ref6.scope, name = _ref6.name;
  return function(val, values) {
    var error;
    if (validateModified && fieldApi.getModified() === void 0) {
      return;
    }
    if (required || noFalsy) {
      error = validateRequired(val, required, getErrorMessage, noFalsy);
      if (error !== void 0) return error;
    }
    if (minimum != null) {
      error = validateMin(val, minimum, getErrorMessage);
      if (error !== void 0) return error;
    }
    if (maximum != null) {
      error = validateMax(val, maximum, getErrorMessage);
      if (error !== void 0) return error;
    }
    if (minLength != null) {
      error = validateMinLength(val, minLength, getErrorMessage);
      if (error !== void 0) return error;
    }
    if (maxLength != null) {
      error = validateMaxLength(val, maxLength, getErrorMessage);
      if (error !== void 0) return error;
    }
    if (pattern) {
      error = validatePattern(val, pattern, getErrorMessage);
      if (error !== void 0) return error;
    }
    if (yupSchema) {
      error = validateYupField(yupSchema, val);
      if (error !== void 0) return error;
    }
    if (validationFuncRef.current) {
      error = validationFuncRef.current(val, values, {
        formState: formController.getFormState(),
        formApi: formController.getFormApi(),
        scope,
        name
      });
      if (error !== void 0) return error;
    }
    return error;
  };
};
var formatterFromString = function formatterFromString2(formatter) {
  return formatter.split("").map(function(_char) {
    if (_char === "#") {
      return /\d/;
    }
    if (_char === "*") {
      return /[\w]/;
    }
    return _char;
  });
};
var getFormatter = function getFormatter2(formatter, value, full) {
  if (typeof formatter === "string") {
    return formatterFromString(formatter);
  }
  if (typeof formatter === "function") {
    var frmtr = formatter(value, full);
    if (typeof frmtr === "string") {
      return formatterFromString(frmtr);
    }
    return frmtr;
  }
  if (Array.isArray(formatter)) {
    return formatter;
  }
  throw new Error("Formatter must be string, array, or function");
};
var matchingIndex = function matchingIndex2(a, b) {
  var i = 0;
  var mi = -1;
  var matching = true;
  while (matching && i < a.length) {
    if (a[i] == b[i]) {
      mi = i;
    } else {
      matching = false;
    }
    i = i + 1;
  }
  return mi;
};
var informedParse = function informedParse2(val, parser) {
  if (_typeof(parser) === "object" && !Array.isArray(parser)) {
    var parsedVal = {};
    Object.keys(val).forEach(function(key) {
      if (parser[key]) {
        var value = parser[key](val[key]);
        parsedVal[key] = value;
      } else {
        parsedVal[key] = val[key];
      }
    });
    return parsedVal;
  }
  return parser(val);
};
var informedFormat = function informedFormat2(val, frmtr, old) {
  var dir = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "ltr";
  if (_typeof(frmtr) === "object" && !Array.isArray(frmtr)) {
    var formattedVal = {};
    var formattedOffset = {};
    Object.keys(val).forEach(function(key) {
      if (frmtr[key]) {
        var _informedFormatter = informedFormatter(val[key], frmtr[key], old ? old[val] : void 0, val, dir), value = _informedFormatter.value, offset = _informedFormatter.offset;
        formattedVal[key] = value;
        formattedOffset[key] = offset;
      } else {
        formattedVal[key] = val[key];
        formattedOffset[key] = 0;
      }
    });
    return {
      value: formattedVal,
      offset: formattedOffset
    };
  }
  return informedFormatter(val, frmtr, old, val, dir);
};
var informedFormatter = function informedFormatter2(val, frmtr, old, full, dir) {
  debug2("Formatting", val);
  debug2("Full Value", full);
  if (val == null) {
    return {
      value: val,
      offset: 0
    };
  }
  var value = "".concat(val);
  var formatter = getFormatter(frmtr, value, full);
  var prefixLength = formatter.findIndex(function(v) {
    return typeof v != "string";
  });
  var suffixStart = null;
  if (typeof formatter[formatter.length - 1] === "string") {
    suffixStart = formatter.length - _toConsumableArray(formatter).reverse().findIndex(function(v) {
      return typeof v != "string";
    });
  }
  var formatted = [];
  var chars = value.split("");
  var vIndex = 0;
  var start = 0;
  var matchIndex = matchingIndex(formatter.slice(0, prefixLength), chars.slice(0, prefixLength));
  if (matchIndex > -1) {
    vIndex = matchIndex + 1;
    formatted = formatted.concat(formatter.slice(0, matchIndex + 1));
    start = matchIndex + 1;
  }
  if (matchIndex < 0) {
    formatted = formatted.concat(formatter.slice(0, prefixLength));
    start = prefixLength;
  }
  for (var i = start; i < formatter.length; i++) {
    var matcher = formatter[i];
    if (vIndex != chars.length) {
      var curChar = chars[vIndex];
      if (typeof matcher === "function") {
        formatted.push(matcher(curChar));
        vIndex = vIndex + 1;
      } else {
        var match = typeof matcher === "string" ? matcher === curChar : matcher.test(curChar);
        if (match && typeof matcher === "string") {
          formatted.push(matcher);
          vIndex = vIndex + 1;
        } else if (!match && typeof matcher === "string") {
          if (vIndex != chars.length) formatted.push(matcher);
        } else if (match && typeof matcher != "string") {
          formatted.push(curChar);
          vIndex = vIndex + 1;
        } else if (!match && typeof matcher != "string") {
          vIndex = vIndex + 1;
          i = i - 1;
        }
      }
    } else {
      if (typeof matcher === "string" && suffixStart && i >= suffixStart) {
        formatted.push(matcher);
      } else {
        break;
      }
    }
  }
  var formattedString = formatted.join("");
  var offset = value ? formattedString.length - value.length : 0;
  var case1 = suffixStart && value && old && value.length < old.length && value.length >= suffixStart && dir != "rtl";
  var suffix = formatter.slice(suffixStart).join("");
  var case2 = suffixStart && formatted.length > suffixStart && (!old || typeof old === "string" && !old.includes(suffix));
  if (case1 || case2) {
    offset = 0;
    if (dir == "rtl") offset = 1;
    if (typeof navigator !== "undefined" && navigator.product === "ReactNative" && value && old && value.length < old.length) {
      formattedString = formattedString.slice(0, suffixStart);
    }
  }
  return {
    value: formattedString,
    offset
  };
};
var createIntlNumberFormatter = function createIntlNumberFormatter2(locale) {
  var _toParts$find$value, _toParts$find, _toParts$find2;
  var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var _ref7 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, formatToParts = _ref7.formatToParts;
  var numberFormatter = new Intl.NumberFormat(locale, opts);
  var toParts = function toParts2(v) {
    return numberFormatter.formatToParts(v);
  };
  if (formatToParts) {
    toParts = function toParts2(v) {
      return formatToParts(v, locale, opts);
    };
  }
  var decimalChar = (_toParts$find$value = (_toParts$find = toParts(0.1).find(function(_ref8) {
    var type = _ref8.type;
    return type === "decimal";
  })) === null || _toParts$find === void 0 ? void 0 : _toParts$find.value) !== null && _toParts$find$value !== void 0 ? _toParts$find$value : ".";
  var minusChar = (_toParts$find2 = toParts(-1).find(function(_ref9) {
    var type = _ref9.type;
    return type === "minusSign";
  })) === null || _toParts$find2 === void 0 ? void 0 : _toParts$find2.value;
  if (!minusChar) {
    var _toParts$find$value2, _toParts$find3;
    minusChar = (_toParts$find$value2 = (_toParts$find3 = toParts(-1).find(function(_ref10) {
      var type = _ref10.type;
      return type === "literal";
    })) === null || _toParts$find3 === void 0 ? void 0 : _toParts$find3.value) !== null && _toParts$find$value2 !== void 0 ? _toParts$find$value2 : "-";
  }
  function stripNonNumeric(str) {
    return "".concat(str).replace(/\D/g, "");
  }
  function toNumberString(str) {
    var decimalChar2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : ".";
    if (str === decimalChar2) {
      return "";
    }
    if (typeof str === "number") {
      return "".concat(str).split(".").map(function(splitStr) {
        return stripNonNumeric(splitStr);
      }).join(".");
    }
    return "".concat(str).split(decimalChar2).map(function(splitStr) {
      return stripNonNumeric(splitStr);
    }).join(".");
  }
  function toFloat(str) {
    var decimalChar2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : ".";
    if (typeof str === "number") {
      return str;
    }
    var _float = parseFloat(toNumberString(str, decimalChar2));
    return !Number.isNaN(_float) ? _float : void 0;
  }
  function mask(value, ogValue) {
    var isNegative = "".concat(value).includes(minusChar) || "".concat(value).includes("-");
    var _float2 = toNumberString(ogValue, decimalChar);
    var isDecimalChar = false;
    if (_float2 == ".") {
      isDecimalChar = true;
    }
    var fraction = "".concat(_float2).split(".")[1];
    var number = isNegative ? -Number(_float2) : Number(_float2);
    var numberParts = toParts(number);
    var maskArray = numberParts.reduce(function(pv, _ref11) {
      var type = _ref11.type, partValue = _ref11.value;
      if (["decimal", "fraction"].includes(type) && fraction == null) {
        return pv;
      }
      if (["integer", "fraction"].includes(type)) {
        return [].concat(_toConsumableArray(pv), _toConsumableArray(partValue.split("").filter(function(_, index) {
          return type === "fraction" ? index < fraction.length : true;
        }).map(function() {
          return /\d/;
        })));
      }
      if (type === "currency" || type === "minusSign") {
        return [].concat(_toConsumableArray(pv), _toConsumableArray(partValue.split("")));
      }
      return [].concat(_toConsumableArray(pv), [partValue]);
    }, []);
    if (isDecimalChar) {
      maskArray = maskArray.map(function(item) {
        return item == "NaN" ? "0".concat(decimalChar) : item;
      });
    }
    return maskArray;
  }
  var parser = function parser2(value) {
    if (value == null) {
      return void 0;
    }
    var isNegative = "".concat(value).includes(minusChar);
    return isNegative ? -toFloat(value, decimalChar) : toFloat(value, decimalChar);
  };
  return {
    formatter: mask,
    parser
  };
};
var getSchemaPathFromJsonPath = function getSchemaPathFromJsonPath2(jsonPath) {
  var schemaPath = jsonPath.replace(/\./g, ".properties.").replace(/\[\d+\]/g, ".items");
  schemaPath = "properties.".concat(schemaPath);
  return schemaPath;
};
var computeFieldFromProperty = function computeFieldFromProperty2(propertyName, property, prefix) {
  var uiControl = property["ui:control"], inputProps = property["ui:props"], uiBefore = property["ui:before"], uiAfter = property["ui:after"], oneOf = property.oneOf, items = property.items, schemaEnum = property["enum"], label = property.title, minimum = property.minimum, maximum = property.maximum, minLength = property.minLength, maxLength = property.maxLength, pattern = property.pattern, required = property.required, type = property.type, subProperties = property.properties, allOf = property.allOf, propertyOrder = property.propertyOrder, errorMessage = property.errorMessage;
  var id = uuidv4();
  if (inputProps && inputProps.id) {
    id = inputProps.id;
  }
  var field = {
    // componentType: uiControl ?? (oneOf && 'select') ?? type,
    componentType: uiControl !== null && uiControl !== void 0 ? uiControl : type,
    name: prefix ? "".concat(prefix, ".").concat(propertyName) : propertyName,
    type,
    uiBefore,
    uiAfter,
    properties: type === "object" ? subProperties : void 0,
    allOf: type === "object" ? allOf : void 0,
    propertyOrder: type === "object" ? propertyOrder : void 0,
    items: type === "array" ? items : void 0,
    propertyName,
    required,
    props: _objectSpread2({
      label,
      id,
      minimum,
      maximum,
      minLength,
      maxLength,
      pattern,
      errorMessage
    }, inputProps)
  };
  if (oneOf) {
    var options = property.oneOf.map(function(option) {
      var _option$uiProps = option["ui:props"], inputProps2 = _option$uiProps === void 0 ? {} : _option$uiProps;
      return _objectSpread2({
        value: option["const"],
        label: option.title
      }, inputProps2);
    });
    field.props.options = options;
  }
  if (schemaEnum) {
    var _options = property["enum"].map(function(val) {
      return {
        value: val,
        label: val
      };
    });
    field.props.options = _options;
  }
  if (items && items.oneOf) {
    var _options2 = items.oneOf.map(function(option) {
      var _option$uiProps2 = option["ui:props"], inputProps2 = _option$uiProps2 === void 0 ? {} : _option$uiProps2;
      return _objectSpread2({
        value: option["const"],
        label: option.title
      }, inputProps2);
    });
    field.props.options = _options2;
  }
  return field;
};
var computeFieldsFromSchema = function computeFieldsFromSchema2(schema, onlyValidateSchema) {
  if (!schema || onlyValidateSchema) {
    return {
      properties: [],
      conditions: [],
      components: []
    };
  }
  var _schema$properties = schema.properties, properties = _schema$properties === void 0 ? {} : _schema$properties, allOf = schema.allOf, _schema$propertyOrder = schema.propertyOrder, propertyOrder = _schema$propertyOrder === void 0 ? [] : _schema$propertyOrder;
  if (Object.keys(properties).length > 0) {
    var fields = Object.keys(properties).sort(function(a, b) {
      var aIndex = propertyOrder.indexOf(a);
      var bIndex = propertyOrder.indexOf(b);
      return (aIndex > -1 ? aIndex : propertyOrder.length + 1) - (bIndex > -1 ? bIndex : propertyOrder.length + 1);
    }).map(function(propertyName) {
      return propertyName;
    });
    var conditions = [];
    var components = [];
    if (allOf) {
      allOf.forEach(function(item) {
        if (item["if"]) {
          var newItem = _objectSpread2({}, item);
          newItem.then = _objectSpread2(_objectSpread2({}, item.then), {}, {
            properties: {}
          });
          newItem.thenProps = {};
          Object.keys(item.then.properties).forEach(function(name) {
            if (!fields.includes(name)) {
              newItem.then.properties[name] = item.then.properties[name];
            } else {
              newItem.thenProps[name] = item.then.properties[name];
            }
          });
          conditions.push(newItem);
        } else {
          components.push(item);
        }
      });
    }
    return {
      properties: fields,
      conditions,
      components
    };
  }
  return {
    properties: [],
    conditions: [],
    components: []
  };
};
function checkCondition(condition, propertyValue) {
  return Object.entries(condition).every(function(_ref12) {
    var _ref13 = _slicedToArray(_ref12, 2), keyword = _ref13[0], value = _ref13[1];
    switch (keyword) {
      case "const":
        if (Array.isArray(propertyValue) && value) {
          return propertyValue.sort().toString() == value.sort().toString();
        } else {
          return propertyValue === value;
        }
      case "minimum":
        return propertyValue >= value;
      case "exclusiveMinimum":
        return propertyValue > value;
      case "maximum":
        return propertyValue <= value;
      case "exclusiveMaximum":
        return propertyValue < value;
      case "enum":
        if (Array.isArray(value) && !Array.isArray(propertyValue)) {
          return value.includes(propertyValue);
        }
        if (Array.isArray(value) && Array.isArray(propertyValue)) {
          return propertyValue.every(function(a) {
            return value.includes(a);
          });
        }
        return false;
      case "oneOf":
        if (Array.isArray(value) && !Array.isArray(propertyValue)) {
          return value.includes(propertyValue);
        }
        if (Array.isArray(value) && Array.isArray(propertyValue)) {
          return value.find(function(a) {
            return propertyValue.includes(a);
          });
        }
        return false;
      case "pattern":
        return new RegExp(value).test(propertyValue);
      // case 'properties':
      //   // eslint-disable-next-line no-use-before-define
      //   return checkProperties(value, values, propertyPath);
      case "not":
        if (_typeof(value) === "object" && value["enum"]) {
          if (Array.isArray(value["enum"]) && !Array.isArray(propertyValue)) {
            return !value["enum"].includes(propertyValue);
          }
          if (Array.isArray(value["enum"]) && Array.isArray(propertyValue)) {
            return !propertyValue.every(function(a) {
              return value["enum"].includes(a);
            });
          }
        }
        return propertyValue !== value;
      default:
        return false;
    }
  });
}

// node_modules/informed/dist/esm/hooks/useScoper.js
var import_react5 = __toESM(require_react(), 1);
function useScoper() {
  var scope = (0, import_react5.useContext)(ScopeContext);
  var scoper = (0, import_react5.useCallback)(function(name) {
    if (scope === name) {
      return name;
    }
    if (scope && name) {
      return "".concat(scope, ".").concat(name);
    }
    return name;
  }, [scope]);
  return scoper;
}

// node_modules/informed/dist/esm/hooks/useFieldSubscription.js
var debug3 = Debug("informed:useFieldSubscription	");
var useFieldSubscription = function useFieldSubscription2(event) {
  var fields = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  var cb = arguments.length > 2 ? arguments[2] : void 0;
  var scoped = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
  var flipped = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
  var scope = useScoper();
  var scopedContext = (0, import_react6.useContext)(ScopeContext);
  var check = typeof fields === "function" ? [] : fields;
  var builtFields = (0, import_react6.useMemo)(function() {
    if (typeof fields === "function") {
      return fields(scopedContext);
    }
    return fields;
  }, [].concat(_toConsumableArray(check), [scope]));
  var scopedFields = (0, import_react6.useMemo)(function() {
    if (scoped && typeof fields != "function") {
      return builtFields.map(function(field) {
        return scope(field);
      });
    }
    return builtFields;
  }, [builtFields]);
  var formController = useFormController();
  (0, import_react6.useEffect)(function() {
    var listener = function listener2(target, triggers) {
      debug3("target: ".concat(target, ", triggers: ").concat(triggers));
      if (target === "_ALL_" || scopedFields.includes(target) || target && scopedFields.some(function(field) {
        if (flipped) {
          return isChild(target, field);
        } else {
          return isChild(field, target);
        }
      })) {
        debug3("subscription ".concat(event, " triggered with target ").concat(target, " from trigger ").concat(triggers, " for"), scopedFields);
        cb(target, triggers);
      }
    };
    formController.emitter.on(event, listener);
    if (scopedFields.length) {
      debug3("Adding subscription on event ".concat(event, ", subscribing to events from ").concat(scopedFields));
    }
    return function() {
      if (scopedFields.length) {
        debug3("Removing subscription on event ".concat(event, ", un-subscribing to events from ").concat(scopedFields));
      }
      formController.emitter.removeListener(event, listener);
    };
  }, _toConsumableArray(check));
};

// node_modules/informed/dist/esm/hooks/useRelevance.js
var logger = Debug("informed:useRelevance	");
var useRelevance = function useRelevance2(_ref) {
  var name = _ref.name, relevant = _ref.relevant, _ref$relevanceWhen = _ref.relevanceWhen, relevanceWhen = _ref$relevanceWhen === void 0 ? [] : _ref$relevanceWhen, _ref$relevanceDeps = _ref.relevanceDeps, relevanceDeps = _ref$relevanceDeps === void 0 ? [] : _ref$relevanceDeps;
  var formController = useFormController();
  var scope = (0, import_react7.useContext)(ScopeContext);
  var scopeRef = (0, import_react7.useRef)(scope);
  scopeRef.current = scope;
  var depsRef = (0, import_react7.useRef)();
  depsRef.current = relevanceDeps;
  var _useStateWithGetter = useStateWithGetter(function() {
    if (relevant) {
      logger("re-evaluated relevance for ".concat(name, " for the first inital load"));
      return relevant({
        formState: formController.getFormState(),
        formApi: formController.getFormApi(),
        scope,
        relevanceDeps
      });
    }
    return true;
  }), _useStateWithGetter2 = _slicedToArray(_useStateWithGetter, 3), isRelevant = _useStateWithGetter2[0], setIsRelevant = _useStateWithGetter2[1], getIsRelevant = _useStateWithGetter2[2];
  var check = typeof relevanceWhen === "function" ? [] : relevanceWhen;
  var fields = (0, import_react7.useMemo)(function() {
    if (typeof relevanceWhen === "function") {
      return relevanceWhen(scope);
    }
    return relevanceWhen;
  }, [].concat(_toConsumableArray(check), [scope]));
  useFieldSubscription(
    "field-value",
    fields,
    function(target) {
      logger("re-evaluating relevance for ".concat(name, " because of ").concat(target));
      var rel = relevant({
        formState: formController.getFormState(),
        formApi: formController.getFormApi(),
        scope: scopeRef.current,
        relevanceDeps: depsRef.current
      });
      if (getIsRelevant() != rel) {
        setIsRelevant(rel);
      }
    },
    // Note: we pass false because we don't want this to be scoped!
    // When the user explicitly uses a function!
    !(typeof relevanceWhen === "function")
  );
  (0, import_react7.useEffect)(function() {
    if (relevant && typeof relevanceWhen !== "function" && relevanceWhen.length === 0) {
      var listener = function listener2(target) {
        logger("re-evaluating relevance for ".concat(name, " because of ").concat(target));
        var rel = relevant({
          formState: formController.getFormState(),
          formApi: formController.getFormApi(),
          scope: scopeRef.current,
          relevanceDeps: depsRef.current
        });
        logger("re-evaluated relevance for ".concat(name, " because of ").concat(target, " and got ").concat(rel));
        if (getIsRelevant() != rel) {
          logger("updating relevance for ".concat(name, " because of ").concat(target, " and got ").concat(rel));
          setIsRelevant(rel);
        }
      };
      formController.emitter.on("field", listener);
      return function() {
        formController.emitter.removeListener("field", listener);
      };
    }
  }, []);
  (0, import_react7.useEffect)(function() {
    if (relevant) {
      logger("re-evaluated relevance for ".concat(name, " because name change or relevanceDeps"));
      setIsRelevant(relevant({
        formState: formController.getFormState(),
        formApi: formController.getFormApi(),
        scope: scopeRef.current,
        relevanceDeps: depsRef.current
      }));
    }
  }, [name].concat(_toConsumableArray(relevanceDeps)));
  return isRelevant;
};

// node_modules/informed/dist/esm/components/Relevant.js
var Relevant = function Relevant2(_ref) {
  var when = _ref.when, relevanceWhen = _ref.relevanceWhen, relevanceDeps = _ref.relevanceDeps, children = _ref.children;
  var formController = useFormController();
  var scope = (0, import_react8.useContext)(ScopeContext);
  var parentRelevantContext = (0, import_react8.useContext)(RelevanceContext);
  var isRelevant = useRelevance({
    relevant: when,
    relevanceWhen,
    relevanceDeps
  });
  var relevantContext = (0, import_react8.useMemo)(function() {
    return {
      isRelevant,
      relevant: function relevant() {
        if (parentRelevantContext && !parentRelevantContext.relevant()) {
          return false;
        }
        return when({
          formState: formController.getFormState(),
          formApi: formController.getFormApi(),
          scope,
          relevanceDeps
        });
      }
    };
  }, [isRelevant, scope, relevanceDeps]);
  return import_react8.default.createElement(RelevanceContext.Provider, {
    value: relevantContext
  }, isRelevant ? children : null);
};

// node_modules/informed/dist/esm/hooks/useArrayField.js
var import_react12 = __toESM(require_react(), 1);

// node_modules/informed/dist/esm/hooks/useFieldApi.js
var import_react11 = __toESM(require_react(), 1);

// node_modules/informed/dist/esm/hooks/useFormApi.js
var import_react9 = __toESM(require_react(), 1);
function useFormApi() {
  var formApi = (0, import_react9.useContext)(FormApiContext);
  return formApi;
}

// node_modules/informed/dist/esm/hooks/useScope.js
var import_react10 = __toESM(require_react(), 1);
function useScope(name) {
  var scope = (0, import_react10.useContext)(ScopeContext);
  if (scope === name) {
    return name;
  }
  if (scope && name) {
    return "".concat(scope, ".").concat(name);
  }
  if (name) {
    return name;
  }
  return scope;
}

// node_modules/informed/dist/esm/hooks/useFieldApi.js
var buildFieldApi = function buildFieldApi2(formApi, name) {
  return {
    getValue: function getValue() {
      return formApi.getValue(name);
    },
    setValue: function setValue(value, e, key) {
      return formApi.setValue(name, value, e, key);
    },
    getTouched: function getTouched() {
      return formApi.getTouched(name);
    },
    setTouched: function setTouched(value, e) {
      return formApi.setTouched(name, value, e);
    },
    getError: function getError() {
      return formApi.getError(name);
    },
    setError: function setError(value) {
      return formApi.setError(name, value);
    },
    getFocused: function getFocused() {
      return formApi.getFocused(name);
    },
    setFocused: function setFocused(value, e) {
      return formApi.setFocused(name, value, e);
    },
    getData: function getData() {
      return formApi.getData(name);
    },
    getModified: function getModified() {
      return formApi.getModified(name);
    },
    reset: function reset(options) {
      return formApi.resetField(name, options);
    },
    validate: function validate() {
      return formApi.validateField(name);
    },
    getDirty: function getDirty() {
      return formApi.getDirty(name);
    },
    getPristine: function getPristine() {
      return formApi.getPristine(name);
    },
    getMaskedValue: function getMaskedValue() {
      return formApi.getMaskedValue(name);
    },
    clearValue: function clearValue() {
      return formApi.clearValue(name);
    },
    setValueQuietly: function setValueQuietly(value) {
      return formApi.setValueQuietly(name, value);
    },
    restore: function restore(value) {
      return formApi.restore(name, value);
    },
    getMemory: function getMemory() {
      return formApi.getMemory(name);
    }
  };
};
function useFieldApi(n) {
  var scoped = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
  var formApi = useFormApi();
  var name = scoped ? useScope(n) : n;
  var fieldApi = (0, import_react11.useMemo)(function() {
    return buildFieldApi(formApi, name);
  }, [name]);
  return fieldApi;
}

// node_modules/informed/dist/esm/hooks/useArrayField.js
var logger2 = Debug("informed:useArrayField	");
var useArrayField = function useArrayField2(_ref) {
  var userName = _ref.name, initialValue = _ref.initialValue, defaultValue = _ref.defaultValue, arrayFieldApiRef = _ref.arrayFieldApiRef;
  var name = useScope(userName);
  var formController = (0, import_react12.useContext)(FormControllerContext);
  var fieldApi = useFieldApi(name);
  var formApi = useFormApi();
  var resetRef = (0, import_react12.useRef)(false);
  var _useState = (0, import_react12.useState)(function() {
    return /* @__PURE__ */ new Map();
  }), _useState2 = _slicedToArray(_useState, 1), fieldsMap = _useState2[0];
  var _useStateWithGetter = useStateWithGetter(function() {
    if (formController.getValue(name)) {
      return formController.getValue(name);
    }
    return initialValue || formController.getInitialValue(name) || defaultValue || [];
  }), _useStateWithGetter2 = _slicedToArray(_useStateWithGetter, 3), initialValues = _useStateWithGetter2[0], setInitialValues = _useStateWithGetter2[1], getInitialValues = _useStateWithGetter2[2];
  var initialKeys = Array.isArray(initialValues) ? initialValues.map(function() {
    return uuidv4();
  }) : [];
  var _useStateWithGetter3 = useStateWithGetter(initialKeys), _useStateWithGetter4 = _slicedToArray(_useStateWithGetter3, 3), keys = _useStateWithGetter4[0], setKeys = _useStateWithGetter4[1], getKeys = _useStateWithGetter4[2];
  var _remove = function remove(i) {
    var ks = getKeys();
    formController.lockRemoval({
      index: ks.length - 1,
      name
    });
    var newKeys = ks.slice(0, i).concat(ks.slice(i + 1, ks.length));
    setKeys(newKeys);
    var initVals = getInitialValues();
    var newInitialValues = initVals.slice(0, i).concat(initVals.slice(i + 1, initVals.length));
    setInitialValues(newInitialValues);
    formController.pullOut("".concat(name, "[").concat(i, "]"));
    formApi.setDirt(name, []);
    formController.emitter.emit("field-value-set", name);
  };
  var swap = function swap2(a, b) {
    logger2("Swapping", "".concat(name, "[").concat(a, "] and ").concat(name, "[").concat(b, "]"));
    formController.swap(name, a, b);
    var ks = getKeys();
    var newKeys = _toConsumableArray(ks);
    if (ks[a] && ks[b]) {
      newKeys[a] = ks[b];
      newKeys[b] = ks[a];
    } else {
      console.warn("Attempted to swap ".concat(a, " with ").concat(b, " but one of them does not exist :("));
    }
    setKeys(newKeys);
  };
  var add = function add2() {
    var amount = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;
    var ks = getKeys();
    if (typeof amount !== "number" || !Number(amount) || amount <= 0) {
      ks.push(uuidv4());
    } else {
      for (var i = 0; i < amount; i++) {
        ks.push(uuidv4());
      }
    }
    setKeys(_toConsumableArray(ks));
    formApi.setPristine(false);
    formApi.setDirt(name, []);
    formController.emitter.emit("field-value-set", name);
  };
  var addWithInitialValue = function addWithInitialValue2(initialValue2) {
    var ks = getKeys();
    ks.push(uuidv4());
    setKeys(_toConsumableArray(ks));
    var newInitialValues = _toConsumableArray(getInitialValues());
    newInitialValues[ks.length - 1] = initialValue2;
    setInitialValues(newInitialValues);
  };
  var initialValueRef = (0, import_react12.useRef)();
  initialValueRef.current = initialValue;
  var defaultValueRef = (0, import_react12.useRef)();
  defaultValueRef.current = defaultValue;
  var reset = function reset2() {
    logger2("------------ ".concat(name, " Array Field Reset Start ------------"));
    resetRef.current = true;
    formController.remove(name);
    var initVals = initialValueRef.current || formController.getInitialValue(name) || defaultValueRef.current || [];
    setInitialValues(initVals);
    setKeys([]);
    if (!fieldsMap.size && resetRef.current) {
      resetRef.current = false;
      logger2("------------ ".concat(name, " Array Field Reset End ------------"));
      var _initVals = getInitialValues();
      var resetKeys = _initVals ? _initVals.map(function() {
        return uuidv4();
      }) : [];
      setKeys(resetKeys);
    }
  };
  var clear = function clear2() {
    formController.remove(name);
    setInitialValues([]);
    setKeys([]);
  };
  var meta = {
    name,
    initialValue,
    fieldApi: _objectSpread2(_objectSpread2({}, fieldApi), {}, {
      reset
    }),
    arrayField: true
  };
  var metaRef = (0, import_react12.useRef)(meta);
  metaRef.current = meta;
  (0, import_react12.useEffect)(function() {
    formController.register(name, metaRef);
    return function() {
      formController.deregister(name);
    };
  }, [name]);
  var fields = keys.map(function(key, i) {
    var arrayFieldItemApi = {
      remove: function remove() {
        return _remove(i);
      }
    };
    var arrayFieldItemState = {
      initialValue: initialValues && initialValues[i],
      key,
      name: "".concat(name, "[").concat(i, "]"),
      index: i,
      parent: name
    };
    return {
      arrayFieldItemApi,
      arrayFieldItemState
    };
  });
  var arrayFieldApi = (0, import_react12.useMemo)(function() {
    return {
      add,
      remove: _remove,
      swap,
      addWithInitialValue,
      reset,
      clear
    };
  }, []);
  if (arrayFieldApiRef) {
    arrayFieldApiRef.current = arrayFieldApi;
  }
  var arrayFieldState = {
    fields,
    name
    // hidden
  };
  var wrappedController = (0, import_react12.useMemo)(function() {
    return _objectSpread2(_objectSpread2({}, formController), {}, {
      register: function register(n, m) {
        fieldsMap.set(n, m);
        formController.register(n, m);
      },
      deregister: function deregister(n) {
        formController.deregister(n);
        fieldsMap["delete"](n);
        if (!fieldsMap.size && resetRef.current) {
          resetRef.current = false;
          logger2("------------ ".concat(name, " Array Field Reset End ------------"));
          var initVals = getInitialValues();
          var resetKeys = initVals ? initVals.map(function() {
            return uuidv4();
          }) : [];
          setKeys(resetKeys);
        }
      },
      getInitialValue: function getInitialValue(fieldName) {
        var modifiedFieldName = fieldName.replace(/(\[[0-9]+\])[^[\]]*$/, "");
        if (modifiedFieldName === name) {
          var path = fieldName.replace(name, "");
          var v = ObjectMap.get(getInitialValues(), path);
          logger2("Getting initial value for ".concat(path, " which is ").concat(v));
          return v;
        }
        return formController.getInitialValue(fieldName);
      }
    });
  }, [name]);
  useFieldSubscription(
    "clear",
    [name],
    function(target) {
      logger2("clear event triggered for ".concat(name, " because of ").concat(target));
      clear();
    },
    false,
    // No scope ( lol ) because we are already scoped
    true
    // Flip order of target comparison
  );
  var render = function render2(children) {
    return import_react12.default.createElement(FormControllerContext.Provider, {
      value: wrappedController
    }, import_react12.default.createElement(ArrayFieldApiContext.Provider, {
      value: arrayFieldApi
    }, import_react12.default.createElement(ArrayFieldStateContext.Provider, {
      value: arrayFieldState
    }, children)));
  };
  return {
    render,
    arrayFieldState,
    arrayFieldApi
  };
};

// node_modules/informed/dist/esm/hooks/useFieldState.js
var import_react14 = __toESM(require_react(), 1);

// node_modules/informed/dist/esm/hooks/useForceUpdate.js
var import_react13 = __toESM(require_react(), 1);
var useForceUpdate = function useForceUpdate2() {
  var _React$useState = import_react13.default.useState(), _React$useState2 = _slicedToArray(_React$useState, 2), updateState = _React$useState2[1];
  var forceUpdate = import_react13.default.useCallback(function() {
    return updateState({});
  }, []);
  return forceUpdate;
};

// node_modules/informed/dist/esm/hooks/useFieldState.js
var debug4 = Debug("informed:useFieldState	");
var useFieldState = function useFieldState2(n) {
  var scoped = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
  var name = scoped ? useScope(n) : n;
  var formController = useFormController();
  var forceUpdate = useForceUpdate();
  (0, import_react14.useEffect)(function() {
    var listener = function listener2(target) {
      if (target === "_ALL_" || target === name || target && isChild(name, target)) {
        debug4("Updating", name);
        forceUpdate();
      }
    };
    formController.emitter.on("field", listener);
    forceUpdate();
    return function() {
      formController.emitter.removeListener("field", listener);
    };
  }, [name]);
  return formController.getFieldState(name);
};

// node_modules/informed/dist/esm/hooks/useScopedApi.js
var import_react15 = __toESM(require_react(), 1);
var buildScopedFormApi = function buildScopedFormApi2(scope, formApi) {
  return {
    getValue: function getValue(field) {
      return formApi.getValue("".concat(scope, ".").concat(field));
    },
    setValue: function setValue(field, value, e, key) {
      return formApi.setValue("".concat(scope, ".").concat(field), value, e, key);
    },
    getTouched: function getTouched(field) {
      return formApi.getTouched("".concat(scope, ".").concat(field));
    },
    setTouched: function setTouched(field, value) {
      return formApi.setTouched("".concat(scope, ".").concat(field), value);
    },
    getFocused: function getFocused(field) {
      return formApi.getFocused("".concat(scope, ".").concat(field));
    },
    setFocused: function setFocused(field, value) {
      return formApi.setFocused("".concat(scope, ".").concat(field), value);
    },
    getError: function getError(field) {
      return formApi.getError("".concat(scope, ".").concat(field));
    },
    setError: function setError(field, value) {
      return formApi.setError("".concat(scope, ".").concat(field), value);
    },
    getData: function getData(field) {
      return formApi.getData("".concat(scope, ".").concat(field));
    },
    getModified: function getModified(field) {
      return formApi.getModified("".concat(scope, ".").concat(field));
    },
    resetField: function resetField(field) {
      return formApi.resetField("".concat(scope, ".").concat(field));
    },
    validate: function validate(field) {
      return formApi.validate("".concat(scope, ".").concat(field));
    },
    getDirty: function getDirty(field) {
      return formApi.getDirty("".concat(scope, ".").concat(field));
    },
    getPristine: function getPristine(field) {
      return formApi.getPristine("".concat(scope, ".").concat(field));
    },
    getMaskedValue: function getMaskedValue(field) {
      return formApi.getMaskedValue("".concat(scope, ".").concat(field));
    },
    clearValue: function clearValue(field) {
      return formApi.clearValue("".concat(scope, ".").concat(field));
    },
    clearError: function clearError(field) {
      return formApi.clearError("".concat(scope, ".").concat(field));
    },
    restore: function restore(field) {
      return formApi.restore("".concat(scope, ".").concat(field));
    }
  };
};
function useScopedApi(scope) {
  var formApi = useFormApi();
  var scopedFormApi = (0, import_react15.useMemo)(function() {
    return buildScopedFormApi(scope, formApi);
  }, [scope]);
  return scopedFormApi;
}

// node_modules/informed/dist/esm/components/ArrayField.js
var _excluded = ["relevant", "relevanceWhen", "relevanceDeps", "name"];
var _excluded2 = ["children"];
var debug5 = Debug("informed:ArrayField	");
var ArrayField = function ArrayField2(_ref) {
  var relevant = _ref.relevant, relevanceWhen = _ref.relevanceWhen, relevanceDeps = _ref.relevanceDeps, name = _ref.name, props = _objectWithoutProperties(_ref, _excluded);
  if (relevant) {
    return import_react16.default.createElement(Relevant, {
      when: relevant,
      relevanceWhen,
      relevanceDeps
    }, import_react16.default.createElement(ArrayFieldWrapper, _extends({
      name
    }, props)));
  } else {
    return import_react16.default.createElement(ArrayFieldWrapper, _extends({
      name
    }, props));
  }
};
var ArrayFieldWrapper = function ArrayFieldWrapper2(_ref2) {
  var children = _ref2.children, props = _objectWithoutProperties(_ref2, _excluded2);
  var _useArrayField = useArrayField(props), render = _useArrayField.render, arrayFieldState = _useArrayField.arrayFieldState, arrayFieldApi = _useArrayField.arrayFieldApi;
  if (typeof children === "function") {
    return render(children(_objectSpread2(_objectSpread2({
      arrayFieldApi,
      arrayFieldState
    }, arrayFieldApi), arrayFieldState)));
  }
  return render(children);
};
var ArrayFieldItem = function ArrayFieldItem2(_ref3) {
  var arrayFieldItemState = _ref3.arrayFieldItemState, arrayFieldItemApi = _ref3.arrayFieldItemApi, children = _ref3.children;
  var formController = useFormController();
  var _useState = (0, import_react16.useState)(function() {
    return /* @__PURE__ */ new Map();
  }), _useState2 = _slicedToArray(_useState, 1), fieldsMap = _useState2[0];
  var subState = useFieldState(arrayFieldItemState.name);
  var itemApi = useScopedApi(arrayFieldItemState.name);
  var wrappedController = (0, import_react16.useMemo)(
    function() {
      return _objectSpread2(_objectSpread2({}, formController), {}, {
        register: function register(n, m) {
          fieldsMap.set(n, m);
          formController.register(n, m);
        },
        deregister: function deregister(n, m) {
          fieldsMap["delete"](n);
          formController.deregister(n, m);
          var lockedUntil = formController.getRemovalLocked();
          debug5(
            // fieldsMap,
            "DEREGISTER",
            n,
            "SIZE",
            fieldsMap.size,
            "INDEX",
            arrayFieldItemState.index,
            "LOCKEDUNTIL",
            lockedUntil
          );
          if (lockedUntil != null && lockedUntil.index === arrayFieldItemState.index && lockedUntil.name === arrayFieldItemState.parent && // We are the last field in this item
          // 1. Example fieldsMap.keys() ==> [ 'friends[0].name' ]
          // 2. We are de registering friends[1].age
          // 3. We look to see if friends[1] is in the field map
          // 4. If its not, we are done and can unlock!!
          !Array.from(fieldsMap.keys()).some(function(k) {
            return k.includes("".concat(arrayFieldItemState.parent, "[").concat(lockedUntil.index, "]"));
          })) {
            debug5("UNLOCKING");
            formController.unlockRemoval();
          }
        }
      });
    },
    // WHATEVER YOU DO... DONT REMOVE THIS... need updated controller when index changes
    [arrayFieldItemState.index]
  );
  var reset = (0, import_react16.useCallback)(function() {
    fieldsMap.forEach(function(fieldMeta) {
      fieldMeta.current.fieldApi.reset();
    });
  }, [arrayFieldItemState.name, arrayFieldItemState.index]);
  var arrayFieldStateValue = _objectSpread2(_objectSpread2({}, arrayFieldItemState), {}, {
    values: subState.value,
    errors: subState.error,
    touched: subState.touched
  });
  var arrayFieldItemApiValue = (0, import_react16.useMemo)(function() {
    return _objectSpread2(_objectSpread2(_objectSpread2({}, arrayFieldItemApi), itemApi), {}, {
      reset
    });
  }, [arrayFieldItemState.name, arrayFieldItemState.index]);
  if (typeof children === "function") {
    return import_react16.default.createElement(FormControllerContext.Provider, {
      value: wrappedController
    }, import_react16.default.createElement(ArrayFieldItemApiContext.Provider, {
      value: arrayFieldItemApiValue
    }, import_react16.default.createElement(ArrayFieldItemStateContext.Provider, {
      value: arrayFieldStateValue
    }, import_react16.default.createElement(ScopeContext.Provider, {
      value: arrayFieldItemState.name
    }, children(_objectSpread2(_objectSpread2({}, arrayFieldItemApiValue), {}, {
      name: arrayFieldItemState.name,
      index: arrayFieldItemState.index
    }))))));
  }
  return import_react16.default.createElement(FormControllerContext.Provider, {
    value: wrappedController
  }, import_react16.default.createElement(ArrayFieldItemApiContext.Provider, {
    value: arrayFieldItemApi
  }, import_react16.default.createElement(ArrayFieldItemStateContext.Provider, {
    value: arrayFieldItemState
  }, import_react16.default.createElement(ScopeContext.Provider, {
    value: arrayFieldItemState.name
  }, children))));
};
ArrayField.Items = function(_ref4) {
  var children = _ref4.children;
  var _useContext = (0, import_react16.useContext)(ArrayFieldStateContext), fields = _useContext.fields;
  return fields.map(function(_ref5) {
    var arrayFieldItemState = _ref5.arrayFieldItemState, arrayFieldItemApi = _ref5.arrayFieldItemApi;
    var key = arrayFieldItemState.key;
    return import_react16.default.createElement(ArrayFieldItem, {
      key,
      arrayFieldItemApi,
      arrayFieldItemState
    }, children);
  });
};
ArrayField.Items.displayName = "ArrayField.Items";

// node_modules/informed/dist/esm/components/Debug.js
var import_react18 = __toESM(require_react(), 1);

// node_modules/informed/dist/esm/hooks/useFormState.js
var import_react17 = __toESM(require_react(), 1);
function useFormState() {
  var formState = (0, import_react17.useContext)(FormStateContext);
  return formState;
}

// node_modules/informed/dist/esm/components/Debug.js
var Debug3 = function Debug4(props) {
  var formState = useFormState();
  var displayState = {};
  if (Object.keys(props).length > 0) {
    Object.keys(props).forEach(function(key) {
      displayState[key] = formState[key];
    });
  } else {
    displayState = formState;
  }
  (0, import_react18.useEffect)(function() {
    var _window;
    if ((_window = window) !== null && _window !== void 0 && _window.Prism) Prism.highlightAll();
  }, [displayState]);
  var content = JSON.stringify(displayState, null, 2);
  if (props.label) {
    content = "// ".concat(props.label, "\n") + content;
  }
  return import_react18.default.createElement("pre", {
    className: "language-js"
  }, import_react18.default.createElement("code", {
    className: "language-js"
  }, content));
};

// node_modules/informed/dist/esm/components/DebugField.js
var import_react19 = __toESM(require_react(), 1);
var _excluded3 = ["name"];
var DebugField = function DebugField2(_ref) {
  var name = _ref.name, props = _objectWithoutProperties(_ref, _excluded3);
  var fieldState = useFieldState(name);
  var displayState = {};
  if (Object.keys(props).length > 0) {
    Object.keys(props).forEach(function(key) {
      displayState[key] = fieldState[key];
    });
  } else {
    displayState = fieldState;
  }
  (0, import_react19.useEffect)(function() {
    var _window;
    if ((_window = window) !== null && _window !== void 0 && _window.Prism) Prism.highlightAll();
  }, [displayState]);
  var content = JSON.stringify(displayState, null, 2);
  if (props.label) {
    content = "// ".concat(props.label, "\n") + content;
  }
  return import_react19.default.createElement("pre", {
    className: "language-js"
  }, import_react19.default.createElement("code", {
    className: "language-js"
  }, content));
};

// node_modules/informed/dist/esm/components/Scope.js
var import_react20 = __toESM(require_react(), 1);
var Scope = function Scope2(_ref) {
  var scope = _ref.scope, children = _ref.children;
  var parentScope = (0, import_react20.useContext)(ScopeContext);
  var newScope;
  if (!parentScope) {
    newScope = scope;
  } else {
    newScope = "".concat(parentScope, ".").concat(scope);
  }
  return import_react20.default.createElement(ScopeContext.Provider, {
    value: newScope
  }, children);
};

// node_modules/informed/dist/esm/components/Form.js
var import_react44 = __toESM(require_react(), 1);

// node_modules/informed/dist/esm/hooks/useForm.js
var import_react23 = __toESM(require_react(), 1);

// node_modules/informed/dist/esm/FormController.js
var debug6 = Debug("informed:FormController	");
var initializeValue = function initializeValue2(value, _ref) {
  var formatter = _ref.formatter, parser = _ref.parser, initialize = _ref.initialize, mask = _ref.mask;
  if (value != null) {
    if (initialize && !parser) {
      return initialize(value);
    }
    if (formatter && !parser) {
      var res = informedFormat(value, formatter);
      return res.value;
    }
    if (mask && !parser) {
      return mask(value);
    }
    return value;
  }
  return void 0;
};
var initializeMask = function initializeMask2(value, _ref2) {
  var formatter = _ref2.formatter, initialize = _ref2.initialize, mask = _ref2.mask;
  if (initialize) {
    return initialize(value);
  }
  if (formatter) {
    var res = informedFormat(value, formatter);
    return res.value;
  }
  if (mask) {
    return mask(value);
  }
  return value;
};
var FormController = function() {
  function FormController2(options) {
    var _this$options$current;
    _classCallCheck(this, FormController2);
    this.options = options;
    this.subscriptions = /* @__PURE__ */ new Map();
    var _options$current = options.current, ajv = _options$current.ajv, schema = _options$current.schema, fieldMap = _options$current.fieldMap, adapter = _options$current.adapter;
    this.ajv = ajv ? new ajv({
      allErrors: true
    }) : null;
    this.ajvValidate = ajv ? this.ajv.compile(schema) : null;
    this.fieldMap = adapter || fieldMap;
    this.emitter = this;
    this.fieldsMap = /* @__PURE__ */ new Map();
    this.validationRequests = /* @__PURE__ */ new Map();
    this.dataRequests = /* @__PURE__ */ new Map();
    this.removalLocked = void 0;
    this.state = {
      pristine: true,
      dirty: false,
      submitted: false,
      invalid: false,
      valid: true,
      submitting: false,
      validating: 0,
      gathering: 0,
      values: {},
      errors: {},
      touched: {},
      maskedValues: {},
      dirt: {},
      focused: {},
      modified: {},
      data: {},
      initialValues: this.options.current.initialValues || {},
      disabled: (_this$options$current = this.options.current.disabled) !== null && _this$options$current !== void 0 ? _this$options$current : false,
      memory: {}
    };
    this.getValue = this.getValue.bind(this);
    this.setValue = this.setValue.bind(this);
    this.setValueQuietly = this.setValueQuietly.bind(this);
    this.setValues = this.setValues.bind(this);
    this.setTheseValues = this.setTheseValues.bind(this);
    this.resetPath = this.resetPath.bind(this);
    this.getMaskedValue = this.getMaskedValue.bind(this);
    this.setMaskedValue = this.setMaskedValue.bind(this);
    this.setModifiedValue = this.setModifiedValue.bind(this);
    this.getTouched = this.getTouched.bind(this);
    this.setTouched = this.setTouched.bind(this);
    this.getFocused = this.getFocused.bind(this);
    this.setFocused = this.setFocused.bind(this);
    this.getError = this.getError.bind(this);
    this.setError = this.setError.bind(this);
    this.reset = this.reset.bind(this);
    this.validate = this.validate.bind(this);
    this.asyncValidate = this.asyncValidate.bind(this);
    this.getDirty = this.getDirty.bind(this);
    this.setDirt = this.setDirt.bind(this);
    this.getPristine = this.getPristine.bind(this);
    this.getFormState = this.getFormState.bind(this);
    this.getFormApi = this.getFormApi.bind(this);
    this.getFieldState = this.getFieldState.bind(this);
    this.getValid = this.getValid.bind(this);
    this.on = this.on.bind(this);
    this.emit = this.emit.bind(this);
    this.removeListener = this.removeListener.bind(this);
    this.remove = this.remove.bind(this);
    this.swap = this.swap.bind(this);
    this.pullOut = this.pullOut.bind(this);
    this.register = this.register.bind(this);
    this.deregister = this.deregister.bind(this);
    this.getInitialValue = this.getInitialValue.bind(this);
    this.initialize = this.initialize.bind(this);
    this.reformat = this.reformat.bind(this);
    this.lockRemoval = this.lockRemoval.bind(this);
    this.unlockRemoval = this.unlockRemoval.bind(this);
    this.resetField = this.resetField.bind(this);
    this.getRemovalLocked = this.getRemovalLocked.bind(this);
    this.isRemovalLocked = this.isRemovalLocked.bind(this);
    this.submitForm = this.submitForm.bind(this);
    this.touchAllFields = this.touchAllFields.bind(this);
    this.keyDown = this.keyDown.bind(this);
    this.validateAsync = this.validateAsync.bind(this);
    this.gatherData = this.gatherData.bind(this);
    this.validated = this.validated.bind(this);
    this.debouncedValidateAsync = debounceByName(this.validateAsync, this.options.current.debounceError);
    this.debouncedGatherInfo = debounceByName(this.gatherData, this.options.current.debounceGather);
    this.getOptions = this.getOptions.bind(this);
    this.validateField = this.validateField.bind(this);
    this.getErrorMessage = this.getErrorMessage.bind(this);
    this.clearValue = this.clearValue.bind(this);
    this.clearError = this.clearError.bind(this);
    this.getData = this.getData.bind(this);
    this.setData = this.setData.bind(this);
    this.getModified = this.getModified.bind(this);
    this.updateValid = this.updateValid.bind(this);
    this.focusFirstError = this.focusFirstError.bind(this);
    this.scrollToFirstError = this.scrollToFirstError.bind(this);
    this.setPristine = this.setPristine.bind(this);
    this.disableForm = this.disableForm.bind(this);
    this.enableForm = this.enableForm.bind(this);
    this.getMemory = this.getMemory.bind(this);
    this.restore = this.restore.bind(this);
    this.fieldExists = this.fieldExists.bind(this);
  }
  _createClass(FormController2, [{
    key: "getOptions",
    value: function getOptions() {
      return this.options.current;
    }
  }, {
    key: "getMemory",
    value: function getMemory(name) {
      return ObjectMap.get(this.state.memory, name);
    }
  }, {
    key: "getValue",
    value: function getValue(name) {
      return ObjectMap.get(this.state.values, name);
    }
  }, {
    key: "getMaskedValue",
    value: function getMaskedValue(name) {
      return ObjectMap.get(this.state.maskedValues, name);
    }
  }, {
    key: "fieldExists",
    value: function fieldExists(name) {
      return !!this.fieldsMap.get(name);
    }
  }, {
    key: "setMaskedValue",
    value: function setMaskedValue(name, value) {
      return ObjectMap.set(this.state.maskedValues, name, value);
    }
  }, {
    key: "setModifiedValue",
    value: function setModifiedValue(name, value) {
      return ObjectMap.set(this.state.modified, name, value);
    }
  }, {
    key: "updateValid",
    value: function updateValid() {
      var prevValid = this.state.valid;
      this.state.valid = ObjectMap.empty(this.state.errors);
      this.state.invalid = !this.state.valid;
      if (prevValid && !this.state.valid) {
        this.emit("invalid");
      }
      if (!prevValid && this.state.valid) {
        this.emit("valid");
      }
    }
  }, {
    key: "setValues",
    value: function setValues(values) {
      this.fieldsMap.forEach(function(fieldMeta) {
        var val = ObjectMap.get(values, fieldMeta.current.name);
        fieldMeta.current.fieldApi.setValue(val);
      });
    }
  }, {
    key: "disableForm",
    value: function disableForm() {
      this.disabled = true;
      this.state.disabled = true;
      this.emit("field", "_ALL_");
    }
  }, {
    key: "enableForm",
    value: function enableForm() {
      this.disabled = void 0;
      this.state.disabled = false;
      this.emit("field", "_ALL_");
    }
  }, {
    key: "setTheseValues",
    value: function setTheseValues(values) {
      this.fieldsMap.forEach(function(fieldMeta) {
        var val = ObjectMap.get(values, fieldMeta.current.name);
        if (val != null) {
          fieldMeta.current.fieldApi.setValue(val);
        }
      });
    }
  }, {
    key: "resetPath",
    value: function resetPath(path) {
      this.fieldsMap.forEach(function(fieldMeta) {
        if (isChild(path, fieldMeta.current.name)) {
          fieldMeta.current.fieldApi.reset();
        }
      });
    }
  }, {
    key: "restore",
    value: function restore(name) {
      this.setValue(name, this.getMemory(name));
    }
  }, {
    key: "setValueQuietly",
    value: function setValueQuietly(name, value) {
      this.setValue(name, value, void 0, void 0, true);
    }
  }, {
    key: "setValue",
    value: function setValue(name, value, e, key, quiet) {
      var _this$fieldsMap$get;
      debug6("setValue ".concat(name), value);
      var hasTrigger = e && _typeof(e) === "object" && e.triggers;
      if (hasTrigger && e.triggers.includes(name)) {
        debug6("NOT setting ".concat(name, " as it exists in the transitive path ").concat(JSON.stringify(e.triggers, null, 2)));
        return;
      }
      var meta = ((_this$fieldsMap$get = this.fieldsMap.get(name)) === null || _this$fieldsMap$get === void 0 ? void 0 : _this$fieldsMap$get.current) || {};
      try {
        if (e && e.target && e.target.selectionStart) {
          meta.setCursor(e.target.selectionStart, key);
        }
      } catch (e2) {
        if (!(e2 instanceof TypeError)) {
          throw e2;
        }
      }
      if (value === "") {
        if (meta.allowEmptyString) {
          var emptyValue = (meta === null || meta === void 0 ? void 0 : meta.type) === "number" ? 0 : value;
          if (meta.emptyValue) {
            emptyValue = meta.emptyValue;
          }
          debug6("Setting ".concat(name, "'s value to ").concat(emptyValue, " because allowEmptyString is set"));
          ObjectMap.set(this.state.values, name, emptyValue);
          if (meta.getInitialValue && meta.getInitialValue() != emptyValue) {
            ObjectMap.set(this.state.modified, name, emptyValue);
          } else {
            debug6("Removing ".concat(name, "'s modified"));
            ObjectMap["delete"](this.state.modified, emptyValue);
          }
          ObjectMap.set(this.state.maskedValues, name, value);
        } else {
          debug6("Setting ".concat(name, "'s value to undefiend"));
          ObjectMap.set(this.state.values, name, void 0);
          ObjectMap.set(this.state.modified, name, void 0);
          ObjectMap.set(this.state.maskedValues, name, void 0);
        }
      } else if ((meta === null || meta === void 0 ? void 0 : meta.type) === "number" && value !== void 0) {
        var val = value;
        var maskedVal = value;
        if (meta.mask && !meta.maskOnBlur) {
          maskedVal = meta.mask(val);
        }
        if (meta.parser) {
          val = val != null ? informedParse(val, meta.parser) : val;
        }
        debug6("Setting ".concat(name, "'s value to ").concat(+val));
        ObjectMap.set(this.state.values, name, +val);
        if (meta.getInitialValue && meta.getInitialValue() != val || // Always set for modifiedOnMount
        meta.modifyOnMount) {
          ObjectMap.set(this.state.modified, name, +val);
        } else {
          debug6("Removing ".concat(name, "'s modified"));
          ObjectMap.set(this.state.modified, name, void 0);
        }
        debug6("Setting ".concat(name, "'s maskedValue to"), +maskedVal);
        ObjectMap.set(this.state.maskedValues, name, +maskedVal);
      } else {
        var _val = value;
        var _maskedVal = value;
        if (meta.clean) {
          _val = meta.clean(_val);
          _maskedVal = _val;
        }
        if (meta.formatter) {
          var res = informedFormat(_val, meta.formatter, this.getMaskedValue(name), meta.dir);
          meta.setCursorOffset(res.offset, key);
          _maskedVal = res.value;
          _val = _maskedVal;
        }
        if (meta.mask && !meta.maskOnBlur) {
          _val = meta.mask(_val);
          _maskedVal = _val;
        }
        if (meta.parser) {
          _val = _val != null ? informedParse(_val, meta.parser) : _val;
        }
        debug6("Setting ".concat(name, "'s value to"), _val);
        ObjectMap.set(this.state.values, name, _val);
        if (!meta.getInitialValue || meta.getInitialValue() != _val || // Always set for modifiedOnMount
        meta.modifyOnMount) {
          debug6("Setting ".concat(name, "'s modified to"), _val);
          ObjectMap.set(this.state.modified, name, _val);
        } else {
          debug6("Removing ".concat(name, "'s modified"));
          ObjectMap.set(this.state.modified, name, void 0);
        }
        debug6("Setting ".concat(name, "'s maskedValue to"), _maskedVal);
        ObjectMap.set(this.state.maskedValues, name, _maskedVal);
      }
      if (meta.validate && meta.validateOn.includes("change")) {
        var _val2 = ObjectMap.get(this.state.values, name);
        debug6("Validating after change ".concat(name, " ").concat(_val2));
        ObjectMap.set(this.state.errors, name, meta.validate(_val2, this.state.values));
      }
      if (meta.yupSchema && meta.validateOn.includes("change")) {
        if (this.getError(name) === void 0) {
          var _val3 = ObjectMap.get(this.state.values, name);
          debug6("Validating YUP after change ".concat(name, " ").concat(_val3));
          ObjectMap.set(this.state.errors, name, validateYupField(meta.yupSchema, _val3));
        }
      }
      if (meta.asyncValidate && meta.validateOn === "change") {
        if (this.getError(name) === void 0) this.debouncedValidateAsync(name);
      }
      if (!quiet) {
        this.state.pristine = false;
        this.state.dirty = !this.state.pristine;
        ObjectMap.set(this.state.dirt, name, true);
      }
      this.updateValid();
      if (meta.onChange) {
        var fieldState = this.getFieldState(name);
        meta.onChange(fieldState, e);
      }
      if (e && meta.onNativeChange) {
        var _fieldState = this.getFieldState(name);
        meta.onNativeChange(_fieldState, e);
      }
      if (hasTrigger) {
        this.emit("field-native", name, [].concat(_toConsumableArray(e.triggers), [name]));
      } else if (e) {
        this.emit("field-native", name, [name]);
      }
      if (meta.gatherData && !meta.gatherOnBlur) {
        this.debouncedGatherInfo(name);
      }
      this.emit("field", name);
      this.emit("field-value", name);
      this.emit("field-modified", name);
      this.emit("field-value-set", name);
    }
  }, {
    key: "validateField",
    value: function validateField(name) {
      var _this$fieldsMap$get2;
      var meta = (_this$fieldsMap$get2 = this.fieldsMap.get(name)) === null || _this$fieldsMap$get2 === void 0 ? void 0 : _this$fieldsMap$get2.current;
      if (!meta) return;
      if (meta.validate) {
        var val = ObjectMap.get(this.state.values, name);
        debug6("Validating field ".concat(name, " via validateField with value ").concat(val));
        ObjectMap.set(this.state.errors, name, meta.validate(val, this.state.values));
      }
      if (meta.yupSchema) {
        if (this.getError(name) === void 0) {
          var _val4 = ObjectMap.get(this.state.values, name);
          debug6("Validating YUP field via validateField ".concat(name, " ").concat(_val4));
          ObjectMap.set(this.state.errors, name, validateYupField(meta.yupSchema, _val4));
        }
      }
      this.updateValid();
      this.emit("field", name);
    }
  }, {
    key: "getModified",
    value: function getModified(name) {
      return ObjectMap.get(this.state.modified, name);
    }
  }, {
    key: "getFocused",
    value: function getFocused(name) {
      return ObjectMap.get(this.state.focused, name);
    }
  }, {
    key: "setFocused",
    value: function setFocused(name, value, e) {
      var _this$fieldsMap$get3;
      debug6("Setting ".concat(name, "'s focused to ").concat(value));
      var meta = ((_this$fieldsMap$get3 = this.fieldsMap.get(name)) === null || _this$fieldsMap$get3 === void 0 ? void 0 : _this$fieldsMap$get3.current) || {};
      ObjectMap.set(this.state.focused, name, value);
      if (meta.onFocus) {
        var fieldState = this.getFieldState(name);
        meta.onFocus(fieldState, e);
      }
      this.emit("field", name);
    }
  }, {
    key: "getTouched",
    value: function getTouched(name) {
      return ObjectMap.get(this.state.touched, name);
    }
  }, {
    key: "setTouched",
    value: function setTouched(name, value, e) {
      var _this$fieldsMap$get4;
      debug6("Setting ".concat(name, "'s touched to ").concat(value));
      var meta = ((_this$fieldsMap$get4 = this.fieldsMap.get(name)) === null || _this$fieldsMap$get4 === void 0 ? void 0 : _this$fieldsMap$get4.current) || {};
      ObjectMap.set(this.state.touched, name, value);
      if (meta.mask && meta.maskOnBlur) {
        var val = ObjectMap.get(this.state.values, name);
        var maskedVal = val;
        maskedVal = meta.mask(val);
        if (meta.parser) {
          val = val != null ? informedParse(val, meta.parser) : val;
        }
        debug6("Setting ".concat(name, "'s value to"), maskedVal);
        ObjectMap.set(this.state.values, name, maskedVal);
        debug6("Setting ".concat(name, "'s maskedValue to"), maskedVal);
        ObjectMap.set(this.state.maskedValues, name, maskedVal);
      }
      if (meta.validate && (meta.validateOn.includes("blur") || meta.validateOn.includes("change"))) {
        var _val5 = ObjectMap.get(this.state.values, name);
        debug6("Validating after blur ".concat(name, " ").concat(_val5));
        ObjectMap.set(this.state.errors, name, meta.validate(_val5, this.state.values));
      }
      if (meta.asyncValidate && (meta.validateOn === "blur" || meta.validateOn === "change-blur" || meta.validateOn === "change")) {
        if (this.getError(name) === void 0) {
          this.validateAsync(name);
        }
      }
      this.updateValid();
      if (meta.gatherData && meta.gatherOnBlur) {
        this.debouncedGatherInfo(name);
      }
      if (meta.onBlur) {
        var fieldState = this.getFieldState(name);
        meta.onBlur(fieldState, e);
      }
      this.emit("field", name);
    }
  }, {
    key: "getData",
    value: function getData(name) {
      return ObjectMap.get(this.state.data, name);
    }
  }, {
    key: "setData",
    value: function setData(name, value) {
      debug6("Setting ".concat(name, "'s data to ").concat(value));
      ObjectMap.set(this.state.data, name, value);
      this.emit("field", name);
    }
  }, {
    key: "getError",
    value: function getError(name) {
      return ObjectMap.get(this.state.errors, name);
    }
  }, {
    key: "setError",
    value: function setError(name, value) {
      debug6("Setting ".concat(name, "'s error to ").concat(value));
      ObjectMap.set(this.state.errors, name, value);
      this.state.valid = ObjectMap.empty(this.state.errors);
      this.state.invalid = !this.state.valid;
      this.emit("field", name);
    }
  }, {
    key: "getInitialValue",
    value: function getInitialValue(name) {
      return ObjectMap.get(this.state.initialValues, name);
    }
  }, {
    key: "getDirty",
    value: function getDirty(name) {
      return !!ObjectMap.get(this.state.dirt, name);
    }
  }, {
    key: "setDirt",
    value: function setDirt(name, value) {
      return ObjectMap.set(this.state.dirt, name, value);
    }
  }, {
    key: "getPristine",
    value: function getPristine(name) {
      return !this.getDirty(name);
    }
  }, {
    key: "getValid",
    value: function getValid(name) {
      return ObjectMap.get(this.state.errors, name) === void 0;
    }
  }, {
    key: "getFormState",
    value: function getFormState() {
      return this.state;
    }
  }, {
    key: "clearValue",
    value: function clearValue(name) {
      this.setValue(name, void 0);
      this.emit("clear", name);
    }
  }, {
    key: "clearError",
    value: function clearError(name) {
      this.setError(name, void 0);
    }
  }, {
    key: "setPristine",
    value: function setPristine(pristine) {
      this.state.pristine = pristine;
      this.state.dirty = !this.state.pristine;
      this.emit("field");
    }
  }, {
    key: "getFormApi",
    value: function getFormApi() {
      return {
        getValue: this.getValue,
        setValue: this.setValue,
        setValueQuietly: this.setValueQuietly,
        getMaskedValue: this.getMaskedValue,
        setMaskedValue: this.setMaskedValue,
        setModifiedValue: this.setModifiedValue,
        getTouched: this.getTouched,
        setTouched: this.setTouched,
        getError: this.getError,
        setError: this.setError,
        getFocused: this.getFocused,
        setFocused: this.setFocused,
        getData: this.getData,
        setData: this.setData,
        getModified: this.getModified,
        resetField: this.resetField,
        reset: this.reset,
        getFormState: this.getFormState,
        getPristine: this.getPristine,
        getDirty: this.getDirty,
        setDirt: this.setDirt,
        validateField: this.validateField,
        getFieldState: this.getFieldState,
        getInitialValue: this.getInitialValue,
        touchAllFields: this.touchAllFields,
        validate: this.validate,
        asyncValidate: this.asyncValidate,
        setValues: this.setValues,
        setTheseValues: this.setTheseValues,
        resetPath: this.resetPath,
        submitForm: this.submitForm,
        clearValue: this.clearValue,
        clearError: this.clearError,
        focusFirstError: this.focusFirstError,
        setPristine: this.setPristine,
        disable: this.disableForm,
        enable: this.enableForm,
        restore: this.restore,
        getMemory: this.getMemory,
        fieldExists: this.fieldExists
      };
    }
  }, {
    key: "getFieldState",
    value: function getFieldState(name) {
      var _this$fieldsMap$get5;
      var meta = ((_this$fieldsMap$get5 = this.fieldsMap.get(name)) === null || _this$fieldsMap$get5 === void 0 ? void 0 : _this$fieldsMap$get5.current) || {};
      var error = this.getError(name);
      var focused = !!this.getFocused(name);
      var modified = !!this.getModified(name);
      var dirty = this.getDirty(name);
      var valid = this.getValid(name);
      var touched = !!this.getTouched(name);
      var pristine = !dirty;
      var validating = !!this.validationRequests.get(name);
      var gathering = !!this.dataRequests.get(name);
      var memory = this.getMemory(name);
      var showError = false;
      if (meta && meta.showErrorIfError) {
        showError = error !== void 0;
      } else if (meta && meta.showErrorIfDirty) {
        showError = error !== void 0 && (dirty || touched);
      } else if (meta && meta.showErrorIfTouched) {
        showError = error !== void 0 && touched;
      }
      return {
        value: this.getValue(name),
        maskedValue: this.getMaskedValue(name),
        modified,
        touched,
        error: this.getError(name),
        data: this.getData(name),
        pristine,
        dirty,
        valid,
        invalid: !valid,
        showError,
        validating,
        gathering,
        focused,
        memory
      };
    }
  }, {
    key: "remove",
    value: function remove(name) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var meta = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      debug6("Remove", name);
      if (!this.removalLocked) {
        var _options$value = options.value, keepValue = _options$value === void 0 ? false : _options$value, _options$error = options.error, keepError = _options$error === void 0 ? false : _options$error, _options$touched = options.touched, keepTouched = _options$touched === void 0 ? false : _options$touched;
        if (meta.remember) {
          var valueToRemember = this.getValue(name);
          if (valueToRemember != void 0) {
            debug6("Remembering", name, valueToRemember);
            ObjectMap.set(this.state.memory, name, valueToRemember);
          }
        }
        if (!keepValue) {
          debug6("Delete Value", name);
          ObjectMap["delete"](this.state.values, name);
          debug6("Delete Modified", name);
          ObjectMap["delete"](this.state.modified, name);
          debug6("Delete Masked", name);
          ObjectMap["delete"](this.state.maskedValues, name);
        }
        if (!keepTouched) {
          debug6("Delete Touched", name);
          ObjectMap["delete"](this.state.touched, name);
        }
        if (!keepError) {
          debug6("Delete Errors", name);
          ObjectMap["delete"](this.state.errors, name);
        }
        debug6("Delete Dirt", name);
        ObjectMap["delete"](this.state.dirt, name);
        debug6("Delete Focused", name);
        ObjectMap["delete"](this.state.focused, name);
        debug6("Delete Info", name);
        ObjectMap["delete"](this.state.data, name);
        this.updateValid();
        this.emit("field", name);
        this.emit("field-value", name);
        this.emit("field-modified", name);
      } else {
        debug6("Removal locked so NOT removing", name);
      }
    }
  }, {
    key: "swap",
    value: function swap(name, a, b) {
      debug6("Swap", name, a, b);
      ObjectMap.swap(this.state.values, name, a, b);
      ObjectMap.swap(this.state.modified, name, a, b);
      ObjectMap.swap(this.state.maskedValues, name, a, b);
      ObjectMap.swap(this.state.touched, name, a, b);
      ObjectMap.swap(this.state.errors, name, a, b);
      ObjectMap.swap(this.state.dirt, name, a, b);
      ObjectMap.swap(this.state.focused, name, a, b);
      ObjectMap.swap(this.state.data, name, a, b);
      this.state.pristine = false;
      this.state.dirty = !this.state.pristine;
    }
  }, {
    key: "pullOut",
    value: function pullOut(name) {
      debug6("Pull", name);
      debug6("Pull ".concat(name, " from values"));
      ObjectMap["delete"](this.state.values, name);
      debug6("Pull ".concat(name, " from modified"));
      ObjectMap["delete"](this.state.modified, name);
      debug6("Pull ".concat(name, " from maskedValues"));
      ObjectMap["delete"](this.state.maskedValues, name);
      debug6("Pull ".concat(name, " from touched"));
      ObjectMap["delete"](this.state.touched, name);
      debug6("Pull ".concat(name, " from errors"));
      ObjectMap["delete"](this.state.errors, name);
      debug6("Pull ".concat(name, " from dirt"));
      ObjectMap["delete"](this.state.dirt, name);
      debug6("Pull ".concat(name, " from focused"));
      ObjectMap["delete"](this.state.focused, name);
      debug6("Pull ".concat(name, " from data"));
      ObjectMap["delete"](this.state.data, name);
      this.state.pristine = false;
      this.state.dirty = !this.state.pristine;
    }
  }, {
    key: "register",
    value: function register(name, meta) {
      debug6("Register", name, meta);
      if (!this.fieldsMap.get(name)) {
        this.fieldsMap.set(name, meta);
        this.emit("field", name);
      }
    }
  }, {
    key: "deregister",
    value: function deregister(name) {
      if (this.fieldsMap.get(name)) {
        debug6("De-Register", name);
        this.fieldsMap["delete"](name);
        this.emit("field", name);
      }
    }
    // Third parameter is to prevent any form renders when it first gets initialized
  }, {
    key: "initialize",
    value: function initialize(name, meta) {
      var emit = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      debug6("Initialize", name, "emit:", emit, "state:", this.state);
      if (this.getValue(name) === void 0 && meta.current.initialValue != null && (meta.current.initializeValueIfPristine ? this.state.pristine : true)) {
        var _meta$current = meta.current, formatter = _meta$current.formatter, parser = _meta$current.parser, initialize2 = _meta$current.initialize, clean = _meta$current.clean, mask = _meta$current.mask, modifyOnMount = _meta$current.modifyOnMount;
        var cleanedValue = clean ? clean(meta.current.initialValue) : meta.current.initialValue;
        var initialValue = initializeValue(cleanedValue, {
          formatter,
          parser,
          initialize: initialize2,
          mask
        });
        var initialMask = initializeMask(cleanedValue, {
          formatter,
          initialize: initialize2,
          mask
        });
        debug6("Initializing ".concat(name, "'s value to ").concat(initialValue));
        ObjectMap.set(this.state.values, name, initialValue);
        debug6("Initializing ".concat(name, "'s maskedValue to ").concat(initialMask));
        ObjectMap.set(this.state.maskedValues, name, initialMask);
        if (modifyOnMount) {
          debug6("Initializing ".concat(name, "'s modified to ").concat(initialValue, " because modifyOnMount was passed."));
          ObjectMap.set(this.state.modified, name, initialValue);
        }
      }
      if (meta.current.validate && meta.current.validateOnMount) {
        var val = ObjectMap.get(this.state.values, name);
        debug6("Validating on mount ".concat(name, " ").concat(val), this.state);
        ObjectMap.set(this.state.errors, name, meta.current.validate(val, this.state.values));
      }
      if (meta.current.asyncValidate && meta.current.validateOnMount === true) {
        if (this.getError(name) === void 0) this.validateAsync(name);
      }
      this.state.valid = ObjectMap.empty(this.state.errors);
      this.state.invalid = !this.state.valid;
      if (meta.current.gatherData && meta.current.gatherOnMount === true) {
        this.debouncedGatherInfo(name);
      }
      if (emit) this.emit("field", name);
      if (emit) this.emit("field-value", name);
    }
  }, {
    key: "validated",
    value: function validated(name, res) {
      debug6("Setting ".concat(name, "'s error to ").concat(res, " with ").concat(this.state.validating, " validations left"));
      ObjectMap.set(this.state.errors, name, res);
      this.updateValid();
      this.validationRequests["delete"](name);
      if (this.state.validating > 0) {
        debug6("Still validating ".concat(this.state.validating, " others so just update state."));
        this.emit("field", name);
        return;
      }
      if (this.state.submitting) {
        if (this.valid()) {
          debug6("Submit", this.state);
          this.emit("field", name);
          this.emit("submit");
        } else {
          debug6("Fail", this.state);
          if (this.options.current.focusOnInvalid) {
            this.focusFirstError();
          }
          if (this.options.current.scrollOnInvalid) {
            this.scrollToFirstError();
          }
          this.emit("field", name);
          this.emit("failure");
        }
        this.state.submitting = false;
      }
      if (this.done) {
        if (this.valid()) this.done();
        this.done = void 0;
      }
      this.emit("field", name);
    }
  }, {
    key: "gathered",
    value: function gathered(name, res) {
      debug6("Setting ".concat(name, "'s data to ").concat(res, " with ").concat(this.state.gathering, " gatherers left"));
      ObjectMap.set(this.state.data, name, res);
      this.dataRequests["delete"](name);
      this.emit("field", name);
      this.emit("field-value", name);
    }
  }, {
    key: "gatheredError",
    value: function gatheredError(name, err) {
      debug6("Setting ".concat(name, "'s error to ").concat(err, " with ").concat(this.state.gathering, " gatherers left"));
      ObjectMap.set(this.state.errors, name, err);
      this.dataRequests["delete"](name);
      this.updateValid();
      this.emit("field", name);
      this.emit("field-value", name);
    }
  }, {
    key: "validateAsync",
    value: function validateAsync(name) {
      var _this$fieldsMap$get6, _this = this;
      debug6("VALIDATING ASYNC", name);
      var meta = (_this$fieldsMap$get6 = this.fieldsMap.get(name)) === null || _this$fieldsMap$get6 === void 0 ? void 0 : _this$fieldsMap$get6.current;
      var value = this.getValue(name);
      if (meta && meta.asyncValidate) {
        this.state.validating = this.state.validating + 1;
        var uuid = uuidv4();
        debug6("REQUEST", uuid);
        this.validationRequests.set(name, {
          uuid,
          value
        });
        this.emit("field", name);
        meta.asyncValidate(value, this.state.values).then(function(res) {
          _this.state.validating = _this.state.validating - 1;
          var stale = _this.validationRequests.get(name).uuid !== uuid;
          var invalid = _this.validationRequests.get(name).value !== _this.getValue(name);
          if (!stale && !invalid) {
            debug6("FINISH", uuid);
            _this.validated(name, res);
          } else {
            debug6("".concat(stale ? "STALE" : "INVALID", " THEN"), uuid, value, _this.getValue(name));
          }
        })["catch"](function(err) {
          _this.state.validating = _this.state.validating - 1;
          var stale = _this.validationRequests.get(name).uuid !== uuid;
          var invalid = _this.validationRequests.get(name).value !== _this.getValue(name);
          if (!stale && !invalid) {
            debug6("FINISH", uuid);
            _this.validated(name, err.message);
          } else {
            debug6("".concat(stale ? "STALE" : "INVALID", " THEN"), uuid, value, _this.getValue(name));
          }
        });
      }
    }
  }, {
    key: "gatherData",
    value: function gatherData(name) {
      var _this$fieldsMap$get7, _this2 = this;
      debug6("EXECUTING INFO ASYNC", name);
      var meta = (_this$fieldsMap$get7 = this.fieldsMap.get(name)) === null || _this$fieldsMap$get7 === void 0 ? void 0 : _this$fieldsMap$get7.current;
      var value = this.getValue(name);
      if (meta && meta.gatherData) {
        this.state.gathering = this.state.gathering + 1;
        var uuid = uuidv4();
        debug6("DATA REQUEST", uuid);
        this.dataRequests.set(name, {
          uuid,
          value
        });
        this.emit("field", name);
        meta.gatherData(value, this.state).then(function(res) {
          _this2.state.gathering = _this2.state.gathering - 1;
          var stale = _this2.dataRequests.get(name).uuid !== uuid;
          var invalid = _this2.dataRequests.get(name).value !== _this2.getValue(name);
          if (!stale && !invalid) {
            debug6("DATA FINISH", uuid);
            _this2.gathered(name, res);
          } else {
            debug6("".concat(stale ? "STALE" : "INVALID", " THEN"), uuid, value, _this2.getValue(name));
          }
        })["catch"](function(err) {
          _this2.state.gathering = _this2.state.gathering - 1;
          var stale = _this2.dataRequests.get(name).uuid !== uuid;
          var invalid = _this2.dataRequests.get(name).value !== _this2.getValue(name);
          if (!stale && !invalid) {
            debug6("DATA FINISH", uuid);
            _this2.gatheredError(name, err.message);
          } else {
            debug6("".concat(stale ? "STALE" : "INVALID", " THEN"), uuid, value, _this2.getValue(name));
          }
        });
      }
    }
  }, {
    key: "reset",
    value: function reset() {
      var _ref3, _ref4, _this$disabled;
      var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      debug6("----------------------------- Resetting Form -----------------------------");
      if (this.options.current.resetOnlyOnscreen) {
        var _this$options$current2;
        debug6("Resetting only onscreen inputs");
        this.state.initialValues = (_this$options$current2 = this.options.current.initialValues) !== null && _this$options$current2 !== void 0 ? _this$options$current2 : {};
        this.fieldsMap.forEach(function(fieldMeta) {
          fieldMeta.current.fieldApi.reset({
            resetValue: resetValues
          });
        });
        this.emit("reset");
        return;
      }
      var values = options.values, _options$resetValues = options.resetValues, resetValues = _options$resetValues === void 0 ? true : _options$resetValues;
      this.state = {
        pristine: true,
        dirty: false,
        submitted: false,
        invalid: false,
        valid: true,
        submitting: false,
        validating: 0,
        gathering: 0,
        values: resetValues ? {} : this.state.values,
        errors: {},
        touched: {},
        maskedValues: resetValues ? {} : this.state.maskedValues,
        dirt: {},
        focused: {},
        modified: {},
        data: {},
        initialValues: (_ref3 = values !== null && values !== void 0 ? values : this.options.current.initialValues) !== null && _ref3 !== void 0 ? _ref3 : {},
        disabled: (_ref4 = (_this$disabled = this.disabled) !== null && _this$disabled !== void 0 ? _this$disabled : this.options.current.disabled) !== null && _ref4 !== void 0 ? _ref4 : false,
        memory: {}
      };
      this.fieldsMap.forEach(function(fieldMeta) {
        if (fieldMeta.current.arrayField) {
          debug6("Resetting the array field, ".concat(fieldMeta.current.name));
          fieldMeta.current.fieldApi.reset({
            resetValue: resetValues
          });
        }
      });
      this.fieldsMap.forEach(function(fieldMeta) {
        if (!fieldMeta.current.arrayField) {
          debug6("Resetting the field, ".concat(fieldMeta.current.name));
          fieldMeta.current.fieldApi.reset({
            resetValue: resetValues
          });
        }
      });
      this.fieldsMap.forEach(function(fieldMeta) {
        if (fieldMeta.current.validateOnMount) {
          debug6("Re-validating the field, ".concat(fieldMeta.current.name, " due to a reset and validateOnMount"));
          fieldMeta.current.fieldApi.validate();
        }
      });
      debug6("----------------------------- END Resetting Form -----------------------------");
      this.emit("reset");
    }
  }, {
    key: "focusFirstError",
    value: function focusFirstError() {
      var _this3 = this;
      if (this.options.current.focusOnInvalid) {
        Array.from(this.fieldsMap.values()).some(function(fieldMeta) {
          var meta = fieldMeta.current;
          var formFieldRef = meta.fieldRef;
          var err = _this3.getError(meta.name);
          if (err && formFieldRef) {
            if (typeof formFieldRef.current.focus === "function") {
              debug6("Focusing onto", meta.name);
              formFieldRef.current.focus();
            }
            return true;
          }
          return false;
        });
      }
    }
  }, {
    key: "scrollToFirstError",
    value: function scrollToFirstError() {
      var _this4 = this;
      if (this.options.current.scrollOnInvalid) {
        Array.from(this.fieldsMap.values()).some(function(fieldMeta) {
          var meta = fieldMeta.current;
          var formFieldRef = meta.fieldRef;
          var err = _this4.getError(meta.name);
          if (err && formFieldRef) {
            if (typeof formFieldRef.current.scrollIntoView === "function") {
              debug6("Scrolling to", meta.name);
              formFieldRef.current.scrollIntoView(_this4.options.current.scrollOnInvalid);
            }
            return true;
          }
          return false;
        });
      }
    }
  }, {
    key: "resetField",
    value: function resetField(name) {
      var _this$fieldsMap$get8;
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      debug6("Resetting", name);
      var meta = ((_this$fieldsMap$get8 = this.fieldsMap.get(name)) === null || _this$fieldsMap$get8 === void 0 ? void 0 : _this$fieldsMap$get8.current) || {};
      var formatter = meta.formatter, parser = meta.parser, initialize = meta.initialize, mask = meta.mask, modifyOnMount = meta.modifyOnMount;
      var value = options.value, _options$resetValue = options.resetValue, resetValue = _options$resetValue === void 0 ? true : _options$resetValue, _options$resetError = options.resetError, resetError = _options$resetError === void 0 ? true : _options$resetError, _options$resetTouched = options.resetTouched, resetTouched = _options$resetTouched === void 0 ? true : _options$resetTouched, _options$resetDirt = options.resetDirt, resetDirt = _options$resetDirt === void 0 ? true : _options$resetDirt, _options$resetModifie = options.resetModified, resetModified = _options$resetModifie === void 0 ? true : _options$resetModifie;
      if (value) {
        var initializedValue = initializeValue(value, {
          formatter,
          parser,
          initialize,
          mask
        });
        debug6("Resetting ".concat(name, "'s value to ").concat(initializedValue));
        ObjectMap.set(this.state.values, name, initializedValue);
        var maskedValue = initializeMask(value, {
          formatter,
          parser,
          mask
        });
        debug6("Resetting ".concat(name, "'s maskedValue to ").concat(maskedValue));
        ObjectMap.set(this.state.maskedValues, name, maskedValue);
      } else {
        if (resetValue) {
          var initialValue = initializeValue(meta.getInitialValue && meta.getInitialValue(), {
            formatter,
            parser,
            initialize,
            mask
          });
          var initialMask = initializeMask(meta.getInitialValue && meta.getInitialValue(), {
            formatter,
            initialize,
            mask
          });
          debug6("Resetting ".concat(name, "'s value to ").concat(initialValue));
          ObjectMap.set(this.state.values, name, initialValue);
          debug6("Resetting ".concat(name, "'s maskedValue to ").concat(initialMask));
          ObjectMap.set(this.state.maskedValues, name, initialMask);
          if (modifyOnMount && resetModified) {
            debug6("Resetting ".concat(name, "'s modified to ").concat(initialValue, " because modifyOnMount was passed."));
            ObjectMap.set(this.state.modified, name, initialValue);
          }
        }
      }
      if (resetError) {
        debug6("Resetting ".concat(name, "'s error"));
        ObjectMap["delete"](this.state.errors, name);
      }
      if (resetTouched) {
        debug6("Resetting ".concat(name, "'s touched"));
        ObjectMap["delete"](this.state.touched, name);
      }
      if (resetDirt) {
        debug6("Resetting ".concat(name, "'s dirt"));
        ObjectMap["delete"](this.state.dirt, name);
      }
      if (!modifyOnMount && resetModified) {
        debug6("Resetting ".concat(name, "'s modified"));
        ObjectMap["delete"](this.state.modified, name);
      }
      if (meta.validate && meta.validateOnMount) {
        var val = ObjectMap.get(this.state.values, name);
        debug6("Validating on reset because of validateOnMount ".concat(name, " ").concat(val), this.state);
        ObjectMap.set(this.state.errors, name, meta.validate(val, this.state.values));
      }
      this.state.valid = ObjectMap.empty(this.state.errors);
      this.state.invalid = !this.state.valid;
      if (meta.gatherData && meta.gatherOnMount === true) {
        this.debouncedGatherInfo(name);
      }
      this.emit("field", name);
      this.emit("field-value", name);
      this.emit("field-modified", name);
    }
  }, {
    key: "reformat",
    value: function reformat(name) {
      var _this$fieldsMap$get9;
      debug6("Reformatting", name);
      var meta = (_this$fieldsMap$get9 = this.fieldsMap.get(name)) === null || _this$fieldsMap$get9 === void 0 ? void 0 : _this$fieldsMap$get9.current;
      var currentValue = ObjectMap.get(this.state.values, name);
      var formatter = meta.formatter, parser = meta.parser, initialize = meta.initialize;
      var newValue = initializeValue(currentValue, {
        formatter,
        parser,
        initialize
      });
      var newMaskedValue = initializeMask(currentValue, {
        formatter
      });
      debug6("Reformatting ".concat(name, "'s value to ").concat(newValue));
      ObjectMap.set(this.state.values, name, newValue);
      debug6("Reformatting ".concat(name, "'s maskedValue to ").concat(newMaskedValue));
      ObjectMap.set(this.state.maskedValues, name, newMaskedValue);
      this.emit("field", name);
      this.emit("field-value", name);
      this.emit("field-modified", name);
    }
  }, {
    key: "lockRemoval",
    value: function lockRemoval(i) {
      debug6("LOCKREMOVAL", i);
      this.removalLocked = i;
    }
  }, {
    key: "unlockRemoval",
    value: function unlockRemoval() {
      debug6("UNLOCK REMOVAL");
      this.removalLocked = void 0;
    }
  }, {
    key: "getRemovalLocked",
    value: function getRemovalLocked() {
      return this.removalLocked;
    }
  }, {
    key: "isRemovalLocked",
    value: function isRemovalLocked() {
      return this.removalLocked != null;
    }
  }, {
    key: "valid",
    value: function valid() {
      var errors = this.state.errors;
      return !!ObjectMap.empty(errors);
    }
  }, {
    key: "keyDown",
    value: function keyDown(e) {
      if (e.keyCode == 13 && this.options.current.preventEnter) {
        e.preventDefault(e);
        return false;
      }
    }
  }, {
    key: "validate",
    value: function validate() {
      var _this5 = this;
      debug6("Validating all fields");
      var values = this.state.values;
      var validateModified = this.options.current.validateModified;
      if (validateModified) {
        values = this.state.modified;
      }
      var errors = {};
      if (this.options.current.yupSchema) {
        var yupErrors = validateYupSchema(this.options.current.yupSchema, values);
        errors = _objectSpread2(_objectSpread2({}, errors), yupErrors);
      }
      if (this.options.current.schema && this.options.current.ajv) {
        var ajvErrors = validateAjvSchema(this.ajvValidate, values);
        errors = _objectSpread2(_objectSpread2({}, errors), ajvErrors);
      }
      if (this.options.current.validateFields) {
        var fieldErrors = this.options.current.validateFields(values);
        errors = _objectSpread2(_objectSpread2({}, errors), fieldErrors);
        errors = ObjectMap.purge(errors);
      }
      this.fieldsMap.forEach(function(fieldMeta) {
        var meta = fieldMeta.current;
        var value = _this5.getValue(meta.name);
        var error = meta.validate ? meta.validate(value, values) : void 0;
        if (error != null) {
          ObjectMap.set(errors, meta.name, error);
        }
      });
      this.state.errors = errors;
      this.updateValid();
      this.emit("field", "_ALL_");
    }
  }, {
    key: "asyncValidate",
    value: function asyncValidate(done) {
      var _this6 = this;
      debug6("Async Validating all fields");
      this.done = done;
      this.fieldsMap.forEach(function(meta) {
        var name = meta.current.name;
        if (_this6.getError(name) === void 0) _this6.validateAsync(name);
      });
    }
  }, {
    key: "getErrorMessage",
    value: function getErrorMessage(key, n) {
      var _this$fieldsMap$get10;
      debug6("Getting ".concat(key, " error message for ").concat(n, " Validating all fields"));
      var name = n;
      if (this.options.current.schema) {
        debug6("We have schema so looking in there for error message");
        while (name !== "") {
          debug6("Looking for message at ".concat(name));
          var path = getSchemaPathFromJsonPath(name);
          debug6("Looking for message at schema path ".concat(path));
          var _property = ObjectMap.get(this.options.current.schema, path);
          if (_property && _property.errorMessage) {
            var message = typeof _property.errorMessage === "string" ? _property.errorMessage : _property.errorMessage[key];
            if (message) {
              return message;
            }
          }
          debug6("Did not find message in schema for ".concat(path), _property);
          name = name.substring(0, name.lastIndexOf("."));
        }
        var property = this.options.current.schema;
        if (property.errorMessage) {
          var _message = typeof property.errorMessage === "string" ? property.errorMessage : property.errorMessage[key];
          if (_message) {
            return _message;
          }
        }
      }
      var meta = (_this$fieldsMap$get10 = this.fieldsMap.get(n)) === null || _this$fieldsMap$get10 === void 0 ? void 0 : _this$fieldsMap$get10.current;
      if (meta && meta.errorMessage) {
        var _message2 = typeof meta.errorMessage === "string" ? meta.errorMessage : meta.errorMessage[key];
        if (_message2) {
          return _message2;
        }
      }
      if (this.options.current.errorMessage) {
        var _message3 = typeof this.options.current.errorMessage === "string" ? this.options.current.errorMessage : this.options.current.errorMessage[key];
        if (_message3) {
          return _message3;
        }
      }
    }
  }, {
    key: "touchAllFields",
    value: function touchAllFields() {
      var _this7 = this;
      this.fieldsMap.forEach(function(meta) {
        if (!meta.current.arrayField) {
          debug6("TouchAllFields - setting ".concat(meta.current.name, "'s touched to true"));
          ObjectMap.set(_this7.state.touched, meta.current.name, true);
        }
      });
    }
  }, {
    key: "submitForm",
    value: function submitForm(e) {
      this.state.submitting = true;
      if (!this.options.current.dontPreventDefault && e) {
        e.preventDefault(e);
      }
      this.validate();
      this.touchAllFields();
      this.emit("field", "_ALL_");
      this.asyncValidate();
      if (this.valid() && this.state.validating === 0) {
        debug6("Submit", this.state);
        this.state.submitted = true;
        this.emit("submit");
      } else {
        debug6("Fail", this.state);
        if (this.options.current.focusOnInvalid) {
          this.focusFirstError();
        }
        if (this.options.current.scrollOnInvalid) {
          this.scrollToFirstError();
        }
        this.emit("failure");
      }
      if (this.state.validating === 0) {
        this.state.submitting = false;
      }
      this.emit("field");
    }
    /* -------------------------------- Event Emitter ------------------------------ */
  }, {
    key: "emit",
    value: function emit(event) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      var listeners = this.subscriptions.get(event);
      if (listeners) {
        listeners.forEach(function(listener) {
          return listener.apply(void 0, args);
        });
      }
    }
  }, {
    key: "on",
    value: function on(event, listener) {
      if (!this.subscriptions.get(event)) {
        this.subscriptions.set(event, /* @__PURE__ */ new Set());
      }
      var listeners = this.subscriptions.get(event);
      listeners.add(listener);
    }
  }, {
    key: "removeListener",
    value: function removeListener(event, listener) {
      var listeners = this.subscriptions.get(event);
      listeners["delete"](listener);
    }
  }]);
  return FormController2;
}();

// node_modules/informed/dist/esm/hooks/useUpdateEffect.js
var import_react21 = __toESM(require_react(), 1);
var useUpdateEffect = function useUpdateEffect2(effect, deps) {
  var firstRef = (0, import_react21.useRef)(true);
  var isFirstMount = firstRef.current;
  (0, import_react21.useEffect)(function() {
    if (!isFirstMount) {
      return effect();
    } else {
      firstRef.current = false;
    }
  }, deps);
};

// node_modules/informed/dist/esm/hooks/useInformed.js
var import_react22 = __toESM(require_react(), 1);
function useInformed() {
  return (0, import_react22.useContext)(InformedContext);
}

// node_modules/informed/dist/esm/hooks/useForm.js
var _excluded4 = ["onSubmit", "onReset", "onChange", "onSubmitFailure", "onValueChange", "onValueSet", "onValid", "onInvalid", "onValueModified", "initialValues", "validateFields", "autocomplete", "showErrorIfError", "showErrorIfTouched", "showErrorIfDirty", "validateOn", "validateOnMount", "formApiRef", "dontPreventDefault", "yupSchema", "allowEmptyStrings", "disabled", "preventEnter", "validateModified", "schema", "ajv", "ajvErrors", "components", "errorMessage", "fieldMap", "adapter", "name", "keepState", "keepStateIfRelevant", "focusOnInvalid", "scrollOnInvalid", "resetOnlyOnscreen", "debounceGather", "debounceError"];
var logger3 = Debug("informed:useForm	");
var useForm = function useForm2(_ref) {
  var _window;
  var onSubmit = _ref.onSubmit, onReset = _ref.onReset, onChange = _ref.onChange, onSubmitFailure = _ref.onSubmitFailure, onValueChange = _ref.onValueChange, onValueSet = _ref.onValueSet, onValid = _ref.onValid, onInvalid = _ref.onInvalid, onValueModified = _ref.onValueModified, userInitialValues = _ref.initialValues, validateFields = _ref.validateFields, autocomplete = _ref.autocomplete, showErrorIfError = _ref.showErrorIfError, showErrorIfTouched = _ref.showErrorIfTouched, showErrorIfDirty = _ref.showErrorIfDirty, validateOn = _ref.validateOn, validateOnMount = _ref.validateOnMount, formApiRef = _ref.formApiRef, dontPreventDefault = _ref.dontPreventDefault, yupSchema = _ref.yupSchema, allowEmptyStrings = _ref.allowEmptyStrings, disabled = _ref.disabled, preventEnter = _ref.preventEnter, validateModified = _ref.validateModified, schema = _ref.schema, ajv = _ref.ajv, ajvErrors = _ref.ajvErrors, components = _ref.components, errorMessage = _ref.errorMessage, fieldMap = _ref.fieldMap, adapter = _ref.adapter, name = _ref.name, keepState = _ref.keepState, keepStateIfRelevant = _ref.keepStateIfRelevant, focusOnInvalid = _ref.focusOnInvalid, scrollOnInvalid = _ref.scrollOnInvalid, resetOnlyOnscreen = _ref.resetOnlyOnscreen, debounceGather = _ref.debounceGather, debounceError = _ref.debounceError, userProps = _objectWithoutProperties(_ref, _excluded4);
  var informed = useInformed();
  var initialValues = (0, import_react23.useMemo)(function() {
    if (informed && name) {
      var _informed$getSavedVal;
      logger3("Checking for saved values", informed.getSavedValues(name));
      return (_informed$getSavedVal = informed.getSavedValues(name)) !== null && _informed$getSavedVal !== void 0 ? _informed$getSavedVal : userInitialValues;
    }
    return userInitialValues;
  }, [userInitialValues]);
  if (typeof window !== "undefined" && (_window = window) !== null && _window !== void 0 && (_window = _window.informed) !== null && _window !== void 0 && _window.properties) {
    var _window2;
    var properties = (_window2 = window) === null || _window2 === void 0 || (_window2 = _window2.informed) === null || _window2 === void 0 ? void 0 : _window2.properties;
    Object.keys(properties).forEach(function(key) {
      if (schema.properties[key]) {
        schema.properties[key]["ui:props"] = properties[key];
      }
    });
  }
  var formControllerOptions = {
    initialValues,
    validateFields,
    autocomplete,
    showErrorIfError,
    showErrorIfTouched: showErrorIfTouched !== null && showErrorIfTouched !== void 0 ? showErrorIfTouched : true,
    showErrorIfDirty,
    validateOn,
    validateOnMount,
    // NEW STUFF
    dontPreventDefault,
    yupSchema,
    allowEmptyStrings,
    disabled,
    preventEnter,
    schema,
    ajv,
    ajvErrors,
    components,
    errorMessage,
    fieldMap,
    adapter,
    keepState,
    keepStateIfRelevant,
    validateModified,
    focusOnInvalid,
    scrollOnInvalid,
    resetOnlyOnscreen,
    debounceGather,
    debounceError
  };
  var optionsRef = (0, import_react23.useRef)();
  optionsRef.current = formControllerOptions;
  var _useState = (0, import_react23.useState)(function() {
    return new FormController(optionsRef);
  }), _useState2 = _slicedToArray(_useState, 1), formController = _useState2[0];
  (0, import_react23.useEffect)(function() {
    var onChangeHandler = function onChangeHandler2() {
      return onChange && onChange(formController.getFormState());
    };
    var onResetHandler = function onResetHandler2() {
      return onReset && onReset(formController.getFormState());
    };
    var onSubmitHandler = function onSubmitHandler2() {
      return onSubmit && onSubmit(formController.getFormState());
    };
    var onFailureHandler = function onFailureHandler2() {
      return onSubmitFailure && onSubmitFailure(formController.getFormState());
    };
    var onValueChangeHandler = function onValueChangeHandler2(n) {
      return onValueChange && onValueChange(formController.getFormState(), n);
    };
    var onValueModifiedHandler = function onValueModifiedHandler2(n) {
      return onValueModified && onValueModified(formController.getFormState(), n);
    };
    var onValueSetHandler = function onValueSetHandler2(n) {
      return onValueSet && onValueSet(formController.getFormState(), n);
    };
    var onValidHandler = function onValidHandler2() {
      return onValid && onValid(formController.getFormState());
    };
    var onInvalidHandler = function onInvalidHandler2() {
      return onInvalid && onInvalid(formController.getFormState());
    };
    formController.on("field", onChangeHandler);
    formController.on("reset", onResetHandler);
    formController.on("submit", onSubmitHandler);
    formController.on("failure", onFailureHandler);
    formController.on("field-value", onValueChangeHandler);
    formController.on("field-modified", onValueModifiedHandler);
    formController.on("field-value-set", onValueSetHandler);
    formController.on("valid", onValidHandler);
    formController.on("invalid", onInvalidHandler);
    return function() {
      formController.removeListener("field", onChangeHandler);
      formController.removeListener("reset", onResetHandler);
      formController.removeListener("submit", onSubmitHandler);
      formController.removeListener("failure", onFailureHandler);
      formController.removeListener("field-value", onValueChangeHandler);
      formController.removeListener("field-modified", onValueModifiedHandler);
    };
  }, [onChange, onReset, onSubmit, onSubmitFailure, onValueChange, onValueModified]);
  var _useState3 = (0, import_react23.useState)(function() {
    return formController.getFormState();
  }), _useState4 = _slicedToArray(_useState3, 2), formState = _useState4[0], setFormState = _useState4[1];
  (0, import_react23.useEffect)(function() {
    var listener = function listener2(target) {
      setFormState(_objectSpread2({}, formController.getFormState()));
      if (informed) {
        informed.inform(name, target);
      }
    };
    formController.emitter.on("field", listener);
    setFormState(_objectSpread2({}, formController.getFormState()));
    if (name && informed) {
      informed.register(name, formController);
    }
    return function() {
      formController.emitter.removeListener("field", listener);
      if (name && informed) {
        informed.setSavedValues(name, formController.getFormState().values);
      }
    };
  }, []);
  var formApi = (0, import_react23.useMemo)(function() {
    if (formApiRef) {
      formApiRef.current = formController.getFormApi();
    }
    return formController.getFormApi();
  }, []);
  useUpdateEffect(function() {
    var _formApi$getFormState = formApi.getFormState(), pristine = _formApi$getFormState.pristine;
    if (pristine) {
      logger3("Resetting entire form as form is pristine and we got new initial values");
      formApi.reset();
    }
  }, [initialValues]);
  useUpdateEffect(function() {
    if (disabled) {
      formApi.disable();
    } else {
      formApi.enable();
    }
  }, [disabled]);
  (0, import_react23.useEffect)(function() {
    logger3("Mount");
    formController.lockRemoval(false);
    return function() {
      formController.lockRemoval(true);
      logger3("Un-Mount");
    };
  }, []);
  var render = function render2(children) {
    return import_react23.default.createElement(FormControllerContext.Provider, {
      value: formController
    }, import_react23.default.createElement(FormApiContext.Provider, {
      value: formApi
    }, import_react23.default.createElement(FormStateContext.Provider, {
      value: formState
    }, children)));
  };
  return {
    formApi,
    formState,
    formController,
    render,
    userProps
  };
};

// node_modules/informed/dist/esm/components/form-fields/Input.js
var import_react26 = __toESM(require_react(), 1);

// node_modules/informed/dist/esm/hooks/useField.js
var import_react25 = __toESM(require_react(), 1);

// node_modules/informed/dist/esm/hooks/useCursorPosition.js
var import_react24 = __toESM(require_react(), 1);
var useCursorPosition = function useCursorPosition2(_ref) {
  var value = _ref.value, inputRef = _ref.inputRef, inputRefs = _ref.inputRefs, _ref$maintainCursor = _ref.maintainCursor, maintainCursor = _ref$maintainCursor === void 0 ? false : _ref$maintainCursor;
  var initialCursor = (0, import_react24.useMemo)(function() {
    if (inputRefs) {
      var initOffset = {};
      Object.keys(inputRefs).forEach(function(key) {
        return initOffset[key] = 0;
      });
    } else {
      return 0;
    }
  }, []);
  var _useStateWithGetter = useStateWithGetter(initialCursor), _useStateWithGetter2 = _slicedToArray(_useStateWithGetter, 3), cursor = _useStateWithGetter2[0], setCursor = _useStateWithGetter2[1], getCursor = _useStateWithGetter2[2];
  var _useStateWithGetter3 = useStateWithGetter(initialCursor), _useStateWithGetter4 = _slicedToArray(_useStateWithGetter3, 3), cursorOffset = _useStateWithGetter4[0], setCursorOffset = _useStateWithGetter4[1], getCursorOffset = _useStateWithGetter4[2];
  var setCursorCallback = (0, import_react24.useCallback)(function(c, key) {
    if (key) {
      var newCursor = _objectSpread2({}, getCursor());
      newCursor[key] = c;
      setCursor(newCursor);
    } else {
      setCursor(c);
    }
  }, []);
  var setCursorOffsetCallback = (0, import_react24.useCallback)(function(c, key) {
    if (key) {
      var newCursor = _objectSpread2({}, getCursor());
      newCursor[key] = c[key];
      setCursorOffset(newCursor);
    } else {
      setCursorOffset(c);
    }
  }, []);
  (0, import_react24.useEffect)(function() {
    if (!inputRefs && inputRef.current != null && getCursor()) {
      var offset = getCursorOffset();
      var cursorLoc = getCursor() + offset;
      if (maintainCursor) {
        inputRef.current.setSelectionRange(cursorLoc, cursorLoc);
      }
    }
    if (inputRefs && getCursor()) {
      Object.keys(inputRefs).forEach(function(key) {
        var offset2 = getCursorOffset()[key] < 0 ? 0 : getCursorOffset()[key];
        var cursorLoc2 = getCursor()[key] + offset2;
        if (maintainCursor) {
          inputRefs[key].current.setSelectionRange(cursorLoc2, cursorLoc2);
        }
      });
    }
  }, [value, cursor, cursorOffset]);
  return {
    setCursorOffset: setCursorOffsetCallback,
    setCursor: setCursorCallback,
    cursor,
    getCursor,
    cursorOffset
  };
};

// node_modules/informed/dist/esm/hooks/useField.js
var _excluded5 = ["id", "dir", "type", "name", "onBlur", "onChange", "onFocus", "onNativeChange", "onValueChange", "validate", "asyncValidate", "validateModified", "gatherData", "yupSchema", "multiple", "field", "keep", "keepState", "keepStateIfRelevant", "remember", "inputRef", "inputRefs", "relevant", "defaultValue", "initialValue", "autocomplete", "showErrorIfError", "showErrorIfTouched", "showErrorIfDirty", "formatter", "parser", "clean", "mask", "maintainCursor", "required", "noFalsy", "minimum", "maximum", "minLength", "maxLength", "pattern", "allowEmptyString", "emptyValue", "disabled", "gatherOnMount", "gatherOnBlur", "validateOnMount", "modifyOnMount", "validateOn", "maskOnBlur", "validateWhen", "formatterDependencies", "formController", "initialize", "errorMessage", "initializeValueIfPristine", "relevanceWhen", "relevanceDeps", "validateDeps", "evaluate", "evaluateWhen"];
var logger4 = Debug("informed:useField	");
var useField = function useField2(_ref) {
  var _ref2;
  var id = _ref.id, dir = _ref.dir, type = _ref.type, userName = _ref.name, onBlur = _ref.onBlur, onChange = _ref.onChange, onFocus = _ref.onFocus, onNativeChange = _ref.onNativeChange, onValueChange = _ref.onValueChange, validationFunc = _ref.validate, asyncValidate = _ref.asyncValidate, userValidateModified = _ref.validateModified, gatherData = _ref.gatherData, yupSchema = _ref.yupSchema, multiple = _ref.multiple, field = _ref.field, keep = _ref.keep, userKeepState = _ref.keepState, userKeepStateIfRelevant = _ref.keepStateIfRelevant, remember = _ref.remember, inputRef = _ref.inputRef, inputRefs = _ref.inputRefs, relevant = _ref.relevant, defaultValue = _ref.defaultValue, userInitialValue = _ref.initialValue, userAutocomplete = _ref.autocomplete, userShowErrorIfError = _ref.showErrorIfError, userShowErrorIfTouched = _ref.showErrorIfTouched, userShowErrorIfDirty = _ref.showErrorIfDirty, formatter = _ref.formatter, parser = _ref.parser, clean = _ref.clean, mask = _ref.mask, userMaintainCursor = _ref.maintainCursor, required = _ref.required, noFalsy = _ref.noFalsy, minimum = _ref.minimum, maximum = _ref.maximum, minLength = _ref.minLength, maxLength = _ref.maxLength, pattern = _ref.pattern, userAllowEmptyString = _ref.allowEmptyString, emptyValue = _ref.emptyValue, userDisabled = _ref.disabled, gatherOnMount = _ref.gatherOnMount, gatherOnBlur = _ref.gatherOnBlur, userValidateOnMount = _ref.validateOnMount, modifyOnMount = _ref.modifyOnMount, userValidateOn = _ref.validateOn, maskOnBlur = _ref.maskOnBlur, _ref$validateWhen = _ref.validateWhen, validateWhen = _ref$validateWhen === void 0 ? [] : _ref$validateWhen, _ref$formatterDepende = _ref.formatterDependencies, formatterDependencies = _ref$formatterDepende === void 0 ? [] : _ref$formatterDepende, userFormController = _ref.formController, initialize = _ref.initialize, errorMessage = _ref.errorMessage, initializeValueIfPristine = _ref.initializeValueIfPristine, _ref$relevanceWhen = _ref.relevanceWhen, relevanceWhen = _ref$relevanceWhen === void 0 ? [] : _ref$relevanceWhen, _ref$relevanceDeps = _ref.relevanceDeps, relevanceDeps = _ref$relevanceDeps === void 0 ? [] : _ref$relevanceDeps, _ref$validateDeps = _ref.validateDeps, validateDeps = _ref$validateDeps === void 0 ? [] : _ref$validateDeps;
  _ref.evaluate;
  _ref.evaluateWhen;
  var userProps = _objectWithoutProperties(_ref, _excluded5);
  var n = userName !== null && userName !== void 0 ? userName : field;
  var name = useScope(n);
  var scope = (0, import_react25.useContext)(ScopeContext);
  if (!name) {
    console.warn("name is a required prop!!!!");
  }
  var maintainCursor = userMaintainCursor !== null && userMaintainCursor !== void 0 ? userMaintainCursor : !!formatter;
  var formController = userFormController !== null && userFormController !== void 0 ? userFormController : useFormController();
  var autocomplete = userAutocomplete !== null && userAutocomplete !== void 0 ? userAutocomplete : formController.options.current.autocomplete;
  var showErrorIfError = userShowErrorIfError !== null && userShowErrorIfError !== void 0 ? userShowErrorIfError : formController.options.current.showErrorIfError;
  var showErrorIfTouched = userShowErrorIfTouched !== null && userShowErrorIfTouched !== void 0 ? userShowErrorIfTouched : formController.options.current.showErrorIfTouched;
  var showErrorIfDirty = userShowErrorIfDirty !== null && userShowErrorIfDirty !== void 0 ? userShowErrorIfDirty : formController.options.current.showErrorIfDirty;
  var validateOnMount = userValidateOnMount !== null && userValidateOnMount !== void 0 ? userValidateOnMount : formController.options.current.validateOnMount;
  var validateOn = userValidateOn !== null && userValidateOn !== void 0 ? userValidateOn : formController.options.current.validateOn;
  var keepState = userKeepState !== null && userKeepState !== void 0 ? userKeepState : formController.options.current.keepState;
  var keepStateIfRelevant = userKeepStateIfRelevant !== null && userKeepStateIfRelevant !== void 0 ? userKeepStateIfRelevant : formController.options.current.keepStateIfRelevant;
  var allowEmptyString = userAllowEmptyString !== null && userAllowEmptyString !== void 0 ? userAllowEmptyString : formController.options.current.allowEmptyStrings;
  var validateModified = userValidateModified !== null && userValidateModified !== void 0 ? userValidateModified : formController.options.current.validateModified;
  var disabled = (_ref2 = userDisabled !== null && userDisabled !== void 0 ? userDisabled : formController.disabled) !== null && _ref2 !== void 0 ? _ref2 : formController.options.current.disabled;
  var getInitialValue = function getInitialValue2() {
    var _ref3;
    return (_ref3 = userInitialValue !== null && userInitialValue !== void 0 ? userInitialValue : formController.getInitialValue(name)) !== null && _ref3 !== void 0 ? _ref3 : defaultValue;
  };
  var _useState = (0, import_react25.useState)(function() {
    return getInitialValue();
  }), _useState2 = _slicedToArray(_useState, 1), initialValue = _useState2[0];
  var fieldApi = useFieldApi(name, false);
  var inMultistep = (0, import_react25.useContext)(MultistepStepContext);
  var isRelevant = useRelevance({
    name,
    relevant,
    relevanceWhen,
    relevanceDeps
  });
  var relevantContext = (0, import_react25.useContext)(RelevanceContext);
  var internalRef = (0, import_react25.useRef)(null);
  var ref = import_react25.default.useMemo(function() {
    return inputRef || internalRef;
  }, []);
  var _useState3 = (0, import_react25.useState)(function() {
    return id || uuidv4();
  }), _useState4 = _slicedToArray(_useState3, 1), fieldId = _useState4[0];
  var validationFuncRef = (0, import_react25.useRef)();
  validationFuncRef.current = validationFunc;
  var validate = (0, import_react25.useMemo)(function() {
    return generateValidationFunction(validationFuncRef, yupSchema, {
      required,
      noFalsy,
      minimum,
      maximum,
      minLength,
      maxLength,
      pattern,
      getErrorMessage: function getErrorMessage(key) {
        return formController.getErrorMessage(key, name);
      },
      validateModified,
      fieldApi,
      formController,
      scope,
      name: n
    });
  }, [required, minimum, maximum, minLength, maxLength, pattern, noFalsy, n]);
  var meta = {
    name,
    type,
    dir,
    onBlur,
    onChange,
    onFocus,
    onNativeChange,
    initialValue,
    keep,
    remember,
    keepState,
    keepStateIfRelevant,
    initializeValueIfPristine,
    fieldApi,
    getInitialValue,
    formatter,
    parser,
    clean,
    mask,
    validate,
    yupSchema,
    validateOn: validateOn !== null && validateOn !== void 0 ? validateOn : "blur",
    validateOnMount,
    validateWhen,
    showErrorIfError,
    showErrorIfTouched,
    showErrorIfDirty,
    maskOnBlur,
    asyncValidate,
    gatherData,
    initialize,
    errorMessage,
    allowEmptyString,
    emptyValue,
    gatherOnMount,
    gatherOnBlur,
    fieldRef: ref,
    modifyOnMount
  };
  var metaRef = (0, import_react25.useRef)(meta);
  metaRef.current = meta;
  (0, import_react25.useState)(function() {
    if (isRelevant) {
      var metaInfo = metaRef.current;
      logger4("Initialize", metaInfo.name);
      formController.initialize(metaInfo.name, metaRef, false);
    }
  });
  var fieldState = useFieldState(name, false);
  var _useCursorPosition = useCursorPosition({
    value: fieldState.value,
    inputRef: ref,
    maintainCursor,
    inputRefs
  }), setCursor = _useCursorPosition.setCursor, setCursorOffset = _useCursorPosition.setCursorOffset;
  metaRef.current.setCursorOffset = setCursorOffset;
  metaRef.current.setCursor = setCursor;
  (0, import_react25.useEffect)(function() {
    if (isRelevant) {
      logger4("Register", name, metaRef.current);
      formController.register(name, metaRef);
      logger4("Second Initialize", name);
      formController.initialize(name, metaRef, false);
    }
    return function() {
      logger4("De-Register", name, metaRef.current);
      formController.deregister(name);
    };
  }, [name]);
  useUpdateEffect(function() {
    var metaInfo = metaRef.current;
    if (!isRelevant && !keepState) {
      logger4("RELEVANT REMOVING", metaInfo.name);
      formController.remove(metaInfo.name, metaInfo.keep, metaInfo);
      logger4("RELEVANT De-Register", metaInfo.name);
      formController.deregister(metaInfo.name);
    }
    if (isRelevant) {
      logger4("RELEVANT register", metaInfo.name);
      formController.register(metaInfo.name, metaRef);
      logger4("RELEVANT Initialize", metaInfo.name);
      formController.initialize(metaInfo.name, metaRef);
    }
  }, [isRelevant]);
  (0, import_react25.useEffect)(function() {
    return function() {
      var keepIt = false;
      var metaInfo = metaRef.current;
      logger4("CLEANUP REMOVING", metaInfo.name);
      if (metaInfo.keepState) {
        keepIt = true;
      } else if (relevantContext && !relevantContext.relevant()) {
        keepIt = false;
      } else if (keepStateIfRelevant) {
        keepIt = true;
      } else if (inMultistep) {
        keepIt = true;
      }
      if (!keepIt) {
        formController.remove(metaInfo.name, metaInfo.keep, metaInfo);
      }
    };
  }, []);
  useUpdateEffect(function() {
    formController.reformat(metaRef.current.name);
  }, _toConsumableArray(formatterDependencies));
  useFieldSubscription(
    "field-value",
    [name],
    function(target) {
      if (onValueChange) {
        onValueChange(formController.getFieldState(target));
      }
    },
    false
    // No scope as we are already scoped
  );
  useFieldSubscription("field-value", validateWhen, function(target) {
    logger4("revalidating for ".concat(metaRef.current.name, " because of ").concat(target));
    formController.validateField(metaRef.current.name);
  });
  useUpdateEffect(function() {
    logger4("revalidating for ".concat(metaRef.current.name, " because of deps change"));
    formController.validateField(metaRef.current.name);
  }, validateDeps);
  var render = function render2(children) {
    return isRelevant ? children : null;
  };
  var changeHandler = generateOnChange({
    fieldType: type,
    setValue: fieldApi.setValue,
    multiple,
    ref
  });
  var blurHandler = generateOnBlur({
    setTouched: fieldApi.setTouched
  });
  var focusHandler = generateOnFocus({
    setFocused: fieldApi.setFocused
  });
  var hookedValue = generateValue({
    fieldType: type,
    maskedValue: fieldState.maskedValue,
    multiple: userProps.multiple,
    value: fieldState.value
  });
  var recombinedUserProps = _objectSpread2({
    id: fieldId,
    name,
    // ref,
    type,
    dir,
    multiple,
    autoComplete: autocomplete,
    disabled,
    required,
    min: minimum,
    max: maximum,
    minLength,
    maxLength,
    pattern
  }, userProps);
  return {
    fieldState,
    fieldApi,
    userProps: recombinedUserProps,
    informed: {
      onChange: changeHandler,
      onBlur: blurHandler,
      onFocus: focusHandler,
      value: hookedValue
    },
    ref,
    render
  };
};

// node_modules/informed/dist/esm/components/form-fields/Input.js
var _excluded6 = ["label", "id"];
var Input = import_react26.default.memo(function(props) {
  var _useField = useField(props), render = _useField.render, userProps = _useField.userProps, ref = _useField.ref, fieldState = _useField.fieldState, fieldApi = _useField.fieldApi;
  var setValue = fieldApi.setValue, setTouched = fieldApi.setTouched, setFocused = fieldApi.setFocused;
  var maskedValue = fieldState.maskedValue, showError = fieldState.showError, error = fieldState.error;
  var label = userProps.label, id = userProps.id, rest = _objectWithoutProperties(userProps, _excluded6);
  return render(import_react26.default.createElement(import_react26.default.Fragment, null, label ? import_react26.default.createElement("label", {
    htmlFor: id
  }, label) : null, import_react26.default.createElement("input", _extends({
    ref,
    id
  }, rest, {
    value: !maskedValue && maskedValue !== 0 ? "" : maskedValue,
    onChange: function onChange(e) {
      setValue(e.target.value, e);
    },
    onBlur: function onBlur(e) {
      setTouched(true, e);
    },
    onFocus: function onFocus(e) {
      setFocused(true, e);
    },
    "aria-invalid": !!showError,
    "aria-describedby": "".concat(id, "-error")
  })), showError ? import_react26.default.createElement("small", {
    role: "alert",
    id: "".concat(id, "-error")
  }, error) : null));
});

// node_modules/informed/dist/esm/components/form-fields/TextArea.js
var import_react27 = __toESM(require_react(), 1);
var TextArea = import_react27.default.memo(function(props) {
  var _useField = useField(props), render = _useField.render, userProps = _useField.userProps, ref = _useField.ref, fieldState = _useField.fieldState, fieldApi = _useField.fieldApi;
  var setValue = fieldApi.setValue, setTouched = fieldApi.setTouched, setFocused = fieldApi.setFocused;
  var maskedValue = fieldState.maskedValue, showError = fieldState.showError, error = fieldState.error;
  var label = userProps.label, id = userProps.id;
  return render(import_react27.default.createElement(import_react27.default.Fragment, null, label ? import_react27.default.createElement("label", {
    htmlFor: id
  }, label) : null, import_react27.default.createElement("textarea", _extends({
    ref
  }, userProps, {
    value: !maskedValue ? "" : maskedValue,
    onChange: function onChange(e) {
      setValue(e.target.value, e);
    },
    onBlur: function onBlur(e) {
      setTouched(true, e);
    },
    onFocus: function onFocus(e) {
      setFocused(true, e);
    },
    "aria-invalid": !!showError,
    "aria-describedby": "".concat(id, "-error")
  })), showError ? import_react27.default.createElement("small", {
    role: "alert",
    id: "".concat(id, "-error")
  }, error) : null));
});

// node_modules/informed/dist/esm/components/form-fields/Select.js
var import_react28 = __toESM(require_react(), 1);
var _excluded7 = ["id", "onBlur", "multiple", "label", "options", "children"];
var Select = function Select2(props) {
  var _useField = useField(props), render = _useField.render, userProps = _useField.userProps, fieldState = _useField.fieldState, fieldApi = _useField.fieldApi, ref = _useField.ref;
  var setValue = fieldApi.setValue, setTouched = fieldApi.setTouched;
  var value = fieldState.value, showError = fieldState.showError, error = fieldState.error;
  var id = userProps.id, _onBlur = userProps.onBlur, multiple = userProps.multiple, label = userProps.label, options = userProps.options, children = userProps.children, rest = _objectWithoutProperties(userProps, _excluded7);
  var handleChange = function handleChange2(e) {
    var selected = Array.from(ref.current).filter(function(option) {
      return option.selected;
    }).map(function(option) {
      return option.value;
    });
    setValue(multiple ? selected : selected[0] || "", e);
  };
  return render(import_react28.default.createElement(import_react28.default.Fragment, null, label ? import_react28.default.createElement("label", {
    htmlFor: id
  }, " ", label, " ") : null, import_react28.default.createElement("select", _extends({}, rest, {
    id,
    multiple,
    ref,
    value: value || (multiple ? [] : ""),
    "aria-invalid": !!showError,
    "aria-describedby": "".concat(id, "-error"),
    onChange: handleChange,
    onBlur: function onBlur(e) {
      setTouched(true);
      if (_onBlur) {
        _onBlur(e);
      }
    }
  }), options ? options.map(function(option) {
    return import_react28.default.createElement("option", {
      key: option.value,
      value: option.value,
      disabled: option.disabled
    }, option.label);
  }) : children), showError ? import_react28.default.createElement("small", {
    role: "alert",
    id: "".concat(id, "-error")
  }, error) : null));
};

// node_modules/informed/dist/esm/components/form-fields/Checkbox.js
var import_react29 = __toESM(require_react(), 1);
var _excluded8 = ["id", "label"];
var Checkbox = function Checkbox2(props) {
  var _useField = useField(props), render = _useField.render, userProps = _useField.userProps, fieldState = _useField.fieldState, fieldApi = _useField.fieldApi;
  var setValue = fieldApi.setValue, setTouched = fieldApi.setTouched;
  var value = fieldState.value, error = fieldState.error, showError = fieldState.showError;
  var id = userProps.id, label = userProps.label, rest = _objectWithoutProperties(userProps, _excluded8);
  return render(import_react29.default.createElement(import_react29.default.Fragment, null, label ? import_react29.default.createElement("label", {
    htmlFor: id
  }, label) : null, import_react29.default.createElement("input", _extends({}, rest, {
    id,
    checked: !!value,
    "aria-invalid": !!showError,
    "aria-describedby": "".concat(id, "-error"),
    onChange: function onChange(e) {
      setValue(e.target.checked, e);
    },
    onBlur: function onBlur(e) {
      setTouched(true, e);
    },
    type: "checkbox"
  })), showError ? import_react29.default.createElement("small", {
    role: "alert",
    id: "".concat(id, "-error")
  }, error) : null));
};

// node_modules/informed/dist/esm/components/form-fields/RadioGroup.js
var import_react32 = __toESM(require_react(), 1);

// node_modules/informed/dist/esm/components/form-fields/Radio.js
var import_react31 = __toESM(require_react(), 1);

// node_modules/informed/dist/esm/hooks/useRadioGroup.js
var import_react30 = __toESM(require_react(), 1);
function useRadioGroup() {
  return (0, import_react30.useContext)(RadioGroupContext);
}

// node_modules/informed/dist/esm/components/form-fields/Radio.js
var _excluded9 = ["label", "value"];
var Radio = function Radio2(_ref) {
  var label = _ref.label, value = _ref.value, props = _objectWithoutProperties(_ref, _excluded9);
  var _useRadioGroup = useRadioGroup(), radioGroupApi = _useRadioGroup.radioGroupApi, radioGroupState = _useRadioGroup.radioGroupState;
  var setValue = radioGroupApi.setValue, setTouched = radioGroupApi.setTouched;
  var groupValue = radioGroupState.value, showError = radioGroupState.showError;
  return import_react31.default.createElement("label", null, label, import_react31.default.createElement("input", _extends({}, props, {
    "aria-invalid": !!showError,
    value,
    checked: groupValue === value,
    onChange: function onChange(e) {
      if (!e.target.checked) {
        return;
      }
      setValue(value, e);
    },
    onBlur: function onBlur(e) {
      setTouched(true, e);
    },
    type: "radio"
  })));
};

// node_modules/informed/dist/esm/components/form-fields/RadioGroup.js
var RadioGroup = function RadioGroup2(props) {
  var _useField = useField(props), fieldApi = _useField.fieldApi, fieldState = _useField.fieldState, userProps = _useField.userProps;
  var groupContext = _objectSpread2({
    radioGroupApi: fieldApi,
    radioGroupState: fieldState
  }, props);
  var label = userProps.label, id = userProps.id, options = userProps.options, children = userProps.children;
  var showError = fieldState.showError, error = fieldState.error;
  return import_react32.default.createElement(RadioGroupContext.Provider, {
    value: groupContext
  }, import_react32.default.createElement("fieldset", {
    "aria-describedby": "".concat(id, "-error")
  }, label ? import_react32.default.createElement("legend", null, label) : null, options ? options.map(function(option) {
    return import_react32.default.createElement("label", {
      key: option.value
    }, option.label, " ", import_react32.default.createElement(Radio, {
      value: option.value
    }));
  }) : children, showError ? import_react32.default.createElement("small", {
    role: "alert",
    id: "".concat(id, "-error")
  }, error) : null));
};

// node_modules/informed/dist/esm/components/form-fields/AddButton.js
var import_react34 = __toESM(require_react(), 1);

// node_modules/informed/dist/esm/hooks/useArrayFieldApi.js
var import_react33 = __toESM(require_react(), 1);
function useArrayFieldApi() {
  return (0, import_react33.useContext)(ArrayFieldApiContext);
}

// node_modules/informed/dist/esm/components/form-fields/AddButton.js
var AddButton = function AddButton2(_ref) {
  var text = _ref.text;
  var _useArrayFieldApi = useArrayFieldApi(), add = _useArrayFieldApi.add;
  return import_react34.default.createElement("button", {
    onClick: function onClick() {
      add();
    },
    type: "button"
  }, text ? text : "Add");
};

// node_modules/informed/dist/esm/components/form-fields/RemoveButton.js
var import_react36 = __toESM(require_react(), 1);

// node_modules/informed/dist/esm/hooks/useArrayFieldItemApi.js
var import_react35 = __toESM(require_react(), 1);
function useArrayFieldItemApi() {
  return (0, import_react35.useContext)(ArrayFieldItemApiContext);
}

// node_modules/informed/dist/esm/components/form-fields/RemoveButton.js
var RemoveButton = function RemoveButton2(_ref) {
  var text = _ref.text;
  var _useArrayFieldItemApi = useArrayFieldItemApi(), remove = _useArrayFieldItemApi.remove;
  return import_react36.default.createElement("button", {
    onClick: function onClick() {
      remove();
    },
    type: "button"
  }, text ? text : "Remove");
};

// node_modules/informed/dist/esm/components/form-fields/ArrayField.js
var import_react42 = __toESM(require_react(), 1);

// node_modules/informed/dist/esm/components/FormComponents.js
var import_react37 = __toESM(require_react(), 1);
var FormComponents = function FormComponents2(_ref) {
  var components = _ref.components;
  var _useFormController = useFormController(), fieldMap = _useFormController.fieldMap, getOptions = _useFormController.getOptions;
  var options = getOptions();
  if (!components) return null;
  return components.map(function(comp, i) {
    var _fieldMap$componentTy;
    var componentType = comp["ui:control"], props = comp["ui:props"];
    var Component = (_fieldMap$componentTy = fieldMap[componentType]) !== null && _fieldMap$componentTy !== void 0 ? _fieldMap$componentTy : options.components ? options.components[componentType] : null;
    return import_react37.default.createElement(Component, _extends({
      key: "ui-comp-".concat(i)
    }, props));
  });
};

// node_modules/informed/dist/esm/components/FormFields.js
var import_react41 = __toESM(require_react(), 1);

// node_modules/informed/dist/esm/components/FormField.js
var import_react39 = __toESM(require_react(), 1);

// node_modules/informed/dist/esm/hooks/useConditional.js
var import_react38 = __toESM(require_react(), 1);
var logger5 = Debug("informed:useConditional	");
var useConditional = function useConditional2(_ref) {
  var name = _ref.name, evaluate = _ref.evaluate, _ref$evaluateWhen = _ref.evaluateWhen, evaluateWhen = _ref$evaluateWhen === void 0 ? [] : _ref$evaluateWhen, _ref$dependsOn = _ref.dependsOn, dependsOn = _ref$dependsOn === void 0 ? [] : _ref$dependsOn, _ref$native = _ref["native"], _native = _ref$native === void 0 ? false : _ref$native, _ref$evaluateOnMount = _ref.evaluateOnMount, evaluateOnMount = _ref$evaluateOnMount === void 0 ? true : _ref$evaluateOnMount;
  var formController = useFormController();
  var scope = (0, import_react38.useContext)(ScopeContext);
  var scopeRef = (0, import_react38.useRef)(scope);
  scopeRef.current = scope;
  var _useState = (0, import_react38.useState)(function() {
    if (evaluate && evaluateOnMount) {
      return evaluate({
        formState: formController.getFormState(),
        formApi: formController.getFormApi(),
        scope,
        dependsOn
      });
    }
    return {};
  }), _useState2 = _slicedToArray(_useState, 2), props = _useState2[0], setProps = _useState2[1];
  var check = typeof evaluateWhen === "function" ? [] : evaluateWhen;
  var fields = (0, import_react38.useMemo)(function() {
    if (typeof evaluateWhen === "function") {
      return evaluateWhen(scope);
    }
    return evaluateWhen;
  }, [].concat(_toConsumableArray(check), [scope]));
  var event = _native ? "field-native" : "field-value";
  useFieldSubscription(
    event,
    fields,
    function(target, triggers) {
      logger5("re-evaluating ".concat(name, " because ").concat(target, " changed, triggerd by ").concat(JSON.stringify(triggers, null, 2)));
      var res = evaluate({
        formState: formController.getFormState(),
        formApi: formController.getFormApi(),
        scope: scopeRef.current,
        dependsOn,
        target,
        triggers
      });
      setProps(res);
    },
    // Note: we pass false because we don't want this to be scoped!
    // When the user explicitly uses a function!
    !(typeof evaluateWhen === "function")
  );
  (0, import_react38.useEffect)(function() {
    if (evaluate && evaluateOnMount) {
      setProps(evaluate({
        formState: formController.getFormState(),
        formApi: formController.getFormApi(),
        scope,
        dependsOn
      }));
    }
  }, [name].concat(_toConsumableArray(dependsOn)));
  (0, import_react38.useEffect)(function() {
    var listener = function listener2() {
      if (evaluate && evaluateOnMount) {
        setProps(evaluate({
          formState: formController.getFormState(),
          formApi: formController.getFormApi(),
          scope,
          dependsOn
        }));
      }
    };
    formController.emitter.on("reset", listener);
    return function() {
      formController.emitter.removeListener("reset", listener);
    };
  }, []);
  return props;
};

// node_modules/informed/dist/esm/components/FormField.js
var _excluded10 = ["name", "schema"];
var logger6 = Debug("informed:FormField	");
var FormField = function FormField2(_ref) {
  var _fieldMap$componentTy;
  var name = _ref.name, schema = _ref.schema, rest = _objectWithoutProperties(_ref, _excluded10);
  var _useFormController = useFormController(), fieldMap = _useFormController.fieldMap, getOptions = _useFormController.getOptions, emitter = _useFormController.emitter;
  var fullName = useScope(name);
  var options = getOptions();
  var fieldApi = useFieldApi(name);
  var _useState = (0, import_react39.useState)({}), _useState2 = _slicedToArray(_useState, 2), condProp = _useState2[0], setCondProp = _useState2[1];
  var lookupName = schema ? name : fullName;
  var lookupSchema = schema !== null && schema !== void 0 ? schema : options.schema;
  var path = getSchemaPathFromJsonPath(lookupName);
  var property = ObjectMap.get(lookupSchema, path);
  var condition;
  if (!property) {
    if (lookupSchema.allOf) {
      lookupSchema.allOf.forEach(function(item) {
        if (item["if"]) {
          property = ObjectMap.get(item.then, path);
          condition = item["if"];
        }
      });
    }
    if (!property) {
      return null;
    }
  }
  var schemaField = (0, import_react39.useMemo)(function() {
    return computeFieldFromProperty(name, property);
  }, [name]);
  var schemaProps = schemaField.props, type = schemaField.type, properties = schemaField.properties, items = schemaField.items, componentType = schemaField.componentType, uiBefore = schemaField.uiBefore, uiAfter = schemaField.uiAfter;
  (0, import_react39.useEffect)(function() {
    var updater = function updater2(target, property2) {
      if (target === name) {
        logger6("Updating field props for ".concat(target), computeFieldFromProperty(name, property2));
        setCondProp(computeFieldFromProperty(name, property2));
      }
    };
    var remover = function remover2(target) {
      if (target === name) {
        setCondProp({});
      }
    };
    emitter.on("update-combine", updater);
    emitter.on("update-remove", remover);
    return function() {
      emitter.removeListener("update-combine", updater);
      emitter.removeListener("update-remove", remover);
    };
  }, [name]);
  var hookProps = useConditional({
    name: schemaProps.name,
    evaluate: schemaProps.evaluate,
    evaluateWhen: schemaProps.evaluateWhen,
    dependsOn: schemaProps.dependsOn
  });
  var props = (0, import_react39.useMemo)(function() {
    var condProps = condProp.props;
    var newSchemaProps = sanitize(schemaProps);
    var newCondProps = sanitize(condProps);
    var newHookProps = sanitize(hookProps);
    if (schemaProps !== null && schemaProps !== void 0 && schemaProps.required || newCondProps !== null && newCondProps !== void 0 && newCondProps.required || newHookProps !== null && newHookProps !== void 0 && newHookProps.required) {
      rest.required = true;
    }
    var newProps = _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({}, newSchemaProps), newCondProps), newHookProps), rest);
    logger6("Schema Props for ".concat(name), newSchemaProps);
    logger6("Cond Props for ".concat(name), newCondProps);
    logger6("Hook Props for ".concat(name), newHookProps);
    logger6("New Props for ".concat(name), newProps);
    return newProps;
  }, [condProp, hookProps]);
  useUpdateEffect(function() {
    if (props.options) {
      logger6("options changed", props.options);
      fieldApi.reset();
    }
  }, [props.options]);
  var Component = (_fieldMap$componentTy = fieldMap[componentType]) !== null && _fieldMap$componentTy !== void 0 ? _fieldMap$componentTy : options.components ? options.components[componentType] : null;
  if (schemaProps.options && fieldMap.withOptions && !items) {
    Component = fieldMap.withOptions[componentType] || Component;
  }
  logger6("Rendering Field", name, schemaField);
  if (!Component && type === "object" && properties) {
    return import_react39.default.createElement(Scope, {
      scope: name
    }, import_react39.default.createElement(FormFields, {
      schema: schemaField
    }));
  }
  if (Component && type === "object" && properties) {
    return import_react39.default.createElement(Scope, {
      scope: name
    }, import_react39.default.createElement(Component, props, import_react39.default.createElement(FormFields, {
      schema: schemaField
    })));
  }
  if (!Component && type === "array" && items) {
    return import_react39.default.createElement(ArrayField, _extends({
      name,
      items,
      uiBefore,
      uiAfter
    }, props));
  }
  if (Component && componentType === "array" && items && type === "array") {
    return import_react39.default.createElement(Component, _extends({
      name,
      items,
      uiBefore,
      uiAfter
    }, props));
  }
  if (!Component) {
    return null;
  }
  if (condition) {
    var _condition = condition, conditions = _condition.properties;
    var when = function when2(_ref2) {
      var formApi = _ref2.formApi, scope = _ref2.scope;
      return Object.entries(conditions).every(function(_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2), propertyName = _ref4[0], condition2 = _ref4[1];
        return checkCondition(condition2, formApi.getValue(scope ? "".concat(scope, ".").concat(propertyName) : propertyName));
      });
    };
    var Comp = function Comp2() {
      return import_react39.default.createElement(Relevant, {
        when
      }, import_react39.default.createElement(Component, _extends({
        name
      }, props)));
    };
    return import_react39.default.createElement(Comp, null);
  }
  return import_react39.default.createElement(Component, _extends({
    name
  }, props));
};

// node_modules/informed/dist/esm/components/UpdateFields.js
var import_react40 = __toESM(require_react(), 1);
var logger7 = Debug("informed:FormField	");
var UpdateFields = function UpdateFields2(_ref) {
  var schema = _ref.schema;
  var formController = useFormController();
  (0, import_react40.useEffect)(function() {
    Object.entries(schema).forEach(function(_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2), key = _ref3[0], value = _ref3[1];
      logger7("update-combine ".concat(key), value);
      formController.emitter.emit("update-combine", key, value);
    });
    return function() {
      Object.entries(schema).forEach(function(_ref4) {
        var _ref5 = _slicedToArray(_ref4, 1), key = _ref5[0];
        logger7("update-remove ".concat(key));
        formController.emitter.emit("update-remove", key);
      });
    };
  }, []);
  return null;
};

// node_modules/informed/dist/esm/components/FormFields.js
var FormFields = function FormFields2(_ref) {
  var schema = _ref.schema, onlyValidateSchema = _ref.onlyValidateSchema;
  var _useFormController = useFormController(), getOptions = _useFormController.getOptions;
  var _getOptions = getOptions(), componentsMap = _getOptions.components;
  var fields = (0, import_react41.useMemo)(function() {
    var _computeFieldsFromSch = computeFieldsFromSchema(schema, onlyValidateSchema), properties = _computeFieldsFromSch.properties, conditions = _computeFieldsFromSch.conditions, components = _computeFieldsFromSch.components;
    var mappedProperties = properties.map(function(name) {
      if (name.includes("ui:") && name.split(":").length !== 3) {
        return {
          $id: name.split("ui:")[1]
        };
      }
      var required = schema.required && schema.required.includes(name) ? true : void 0;
      var uuid = uuidv4();
      var Component = import_react41.default.createElement(FormField, {
        name,
        schema,
        key: "schema-field-".concat(name, "-").concat(uuid),
        required
      });
      return {
        Component
      };
    });
    var mappedComponents = components.map(function(component) {
      if (component["ui:control"]) {
        var RenderedComponent = componentsMap[component["ui:control"]];
        var Component = import_react41.default.createElement(RenderedComponent, null, import_react41.default.createElement(FormFields2, {
          schema: component
        }));
        return {
          Component,
          $id: component.$id
        };
      }
    });
    var mappedConditionals = conditions.map(function(conditional, j) {
      var subSchema = conditional.then;
      var $id = conditional.$id;
      var thenProps = conditional.thenProps;
      var conditions2 = conditional["if"].properties;
      var when = function when2(_ref2) {
        var formApi = _ref2.formApi, scope = _ref2.scope;
        return Object.entries(conditions2).every(function(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2), propertyName = _ref4[0], condition = _ref4[1];
          return checkCondition(condition, formApi.getValue(scope ? "".concat(scope, ".").concat(propertyName) : propertyName));
        });
      };
      var Component = import_react41.default.createElement(Relevant, {
        key: "Conditional-ScheamField-".concat(j),
        when
      }, subSchema ? import_react41.default.createElement(FormFields2, {
        schema: subSchema
      }) : null, thenProps ? import_react41.default.createElement(UpdateFields, {
        schema: thenProps
      }) : null);
      return {
        Component,
        $id
      };
    });
    var mappedFields = [];
    mappedProperties.forEach(function(_ref5) {
      var $id = _ref5.$id, Component = _ref5.Component;
      if (Component) {
        mappedFields.push(Component);
      } else if ($id) {
        var conditional = mappedConditionals.find(function(c) {
          return c.$id === $id;
        });
        var component = mappedComponents.find(function(c) {
          return c.$id === $id;
        });
        if (conditional) {
          mappedFields.push(conditional.Component);
          var index = mappedConditionals.findIndex(function(c) {
            return c.$id === $id;
          });
          mappedConditionals.splice(index, 1);
        } else if (component) {
          mappedFields.push(component.Component);
        } else {
          console.error("MappedConditionals", mappedConditionals);
          throw new Error("Unable to find mapping for ".concat($id));
        }
      } else {
        throw new Error("Found property with no ID or component...");
      }
    });
    mappedConditionals.forEach(function(_ref6) {
      var Component = _ref6.Component;
      mappedFields.push(Component);
    });
    return mappedFields;
  }, [schema]);
  return fields;
};

// node_modules/informed/dist/esm/components/form-fields/ArrayField.js
var _excluded11 = ["name", "items", "uiBefore", "uiAfter"];
var ArrayField3 = function ArrayField4(_ref) {
  var name = _ref.name, items = _ref.items, uiBefore = _ref.uiBefore, uiAfter = _ref.uiAfter, props = _objectWithoutProperties(_ref, _excluded11);
  return import_react42.default.createElement(ArrayField, _extends({
    name
  }, props), import_react42.default.createElement(FormComponents, {
    components: uiBefore
  }), import_react42.default.createElement(ArrayField.Items, null, function() {
    return import_react42.default.createElement(import_react42.default.Fragment, null, import_react42.default.createElement(FormFields, {
      schema: items
    }));
  }), import_react42.default.createElement(FormComponents, {
    components: uiAfter
  }));
};

// node_modules/informed/dist/esm/components/form-fields/Hidden.js
var import_react43 = __toESM(require_react(), 1);
function Hidden(props) {
  var _useField = useField(_objectSpread2({
    type: "text"
  }, props)), informed = _useField.informed, render = _useField.render, userProps = _useField.userProps, ref = _useField.ref;
  return render(import_react43.default.createElement("input", _extends({}, informed, userProps, {
    ref,
    type: "hidden"
  })));
}

// node_modules/informed/dist/esm/fieldMap.js
var FieldMap = {
  string: Input,
  number: Input,
  "boolean": Checkbox,
  select: Select,
  input: Input,
  textarea: TextArea,
  checkbox: Checkbox,
  radio: RadioGroup,
  add: AddButton,
  remove: RemoveButton,
  hidden: Hidden,
  array: ArrayField3,
  withOptions: {
    string: Select
  }
};

// node_modules/informed/dist/esm/components/Form.js
var _excluded12 = ["children"];
var debug7 = Debug("informed:Form		");
var Form = function Form2(_ref) {
  var children = _ref.children, rest = _objectWithoutProperties(_ref, _excluded12);
  debug7("Render FORM");
  var _useForm = useForm(_objectSpread2({
    adapter: FieldMap
  }, rest)), formApi = _useForm.formApi, formController = _useForm.formController, formState = _useForm.formState, render = _useForm.render, userProps = _useForm.userProps;
  var getContent = function getContent2() {
    var props = {
      formState,
      formApi
    };
    if (typeof children === "function") {
      return children(props);
    }
    return children;
  };
  return render(import_react44.default.createElement("form", _extends({}, userProps, {
    noValidate: true,
    onReset: formController.reset,
    onSubmit: formController.submitForm,
    onKeyDown: formController.keyDown
  }), getContent()));
};

// node_modules/informed/dist/esm/components/FormProvider.js
var import_react45 = __toESM(require_react(), 1);
var _excluded13 = ["children"];
var debug8 = Debug("informed:Form		");
var FormProvider = function FormProvider2(_ref) {
  var children = _ref.children, rest = _objectWithoutProperties(_ref, _excluded13);
  debug8("Render Form Provider");
  var _useForm = useForm(rest), formApi = _useForm.formApi, formState = _useForm.formState, render = _useForm.render;
  var getContent = function getContent2() {
    var props = {
      formState,
      formApi
    };
    if (typeof children === "function") {
      return children(props);
    }
    return children;
  };
  return render(import_react45.default.createElement(import_react45.default.Fragment, null, getContent()));
};

// node_modules/informed/dist/esm/components/form-fields/Option.js
var import_react46 = __toESM(require_react(), 1);
var _excluded14 = ["value", "forwardedRef", "children"];
var Option = function Option2(_ref) {
  var value = _ref.value, forwardedRef = _ref.forwardedRef, children = _ref.children, rest = _objectWithoutProperties(_ref, _excluded14);
  return import_react46.default.createElement("option", _extends({
    ref: forwardedRef,
    value,
    key: value
  }, rest), children);
};

// node_modules/informed/dist/esm/components/SchemaFields.js
var import_react47 = __toESM(require_react(), 1);
var SchemaFields = function SchemaFields2() {
  var _useFormController = useFormController(), getOptions = _useFormController.getOptions;
  var _getOptions = getOptions(), schema = _getOptions.schema;
  return import_react47.default.createElement(FormFields, {
    schema
  });
};

// node_modules/informed/dist/esm/hooks/useMultistep.js
var import_react48 = __toESM(require_react(), 1);
var useMultistep = function useMultistep2(_ref) {
  var initialStep = _ref.initialStep, multistepApiRef = _ref.multistepApiRef;
  var _useFormController = useFormController(), validate = _useFormController.validate, asyncValidate = _useFormController.asyncValidate, getFormState = _useFormController.getFormState, getFieldState = _useFormController.getFieldState, emitter = _useFormController.emitter;
  var formApi = useFormApi();
  var scope = (0, import_react48.useContext)(ScopeContext);
  var nSteps = (0, import_react48.useRef)(0);
  var currentStep = (0, import_react48.useRef)();
  var _useState = (0, import_react48.useState)(function() {
    return [];
  }), _useState2 = _slicedToArray(_useState, 1), steps = _useState2[0];
  var _useState3 = (0, import_react48.useState)(function() {
    return /* @__PURE__ */ new Map();
  }), _useState4 = _slicedToArray(_useState3, 1), stepsMap = _useState4[0];
  var _useState5 = (0, import_react48.useState)({
    steps: [],
    goal: null
  }), _useState6 = _slicedToArray(_useState5, 2), multistepState = _useState6[0], setState = _useState6[1];
  var multistepApi = (0, import_react48.useMemo)(function() {
    var register = function register2(name, step) {
      var stepMeta = _objectSpread2(_objectSpread2({}, step), {}, {
        index: nSteps.current
      });
      steps.push(stepMeta);
      stepsMap.set(name, stepMeta);
      nSteps.current = nSteps.current + 1;
      var initialGoal = null;
      var startingStep = null;
      if (!initialStep) {
        startingStep = steps[0].name;
      } else if (initialStep && name === initialStep) {
        initialGoal = initialStep;
        startingStep = steps[0].name;
      }
      setState(function(prev) {
        if (!prev.current && startingStep) {
          currentStep.current = startingStep;
        }
        return _objectSpread2(_objectSpread2({}, prev), {}, {
          steps,
          goal: prev.goal || initialGoal,
          initialGoal: prev.goal || initialGoal,
          current: prev.current || startingStep
        });
      });
    };
    var deregister = function deregister2(step) {
      var stepMeta = stepsMap.get(step);
      steps.splice(stepMeta.index, 1);
      steps.forEach(function(s, i) {
        return s.index = i;
      });
      stepsMap["delete"](step);
      nSteps.current = steps.length;
      setState(function(prev) {
        return _objectSpread2(_objectSpread2({}, prev), {}, {
          steps
        });
      });
    };
    var getNextStep = function getNextStep2() {
      var stepMeta = stepsMap.get(currentStep.current);
      var nextStep;
      for (var i = stepMeta.index + 1; i < steps.length; i++) {
        nextStep = steps[i];
        var formState = getFormState();
        if (nextStep.relevant ? nextStep.relevant({
          formState,
          formApi,
          scope,
          relevanceDeps: nextStep.relDepsRef.current
        }) : true) {
          return nextStep.name;
        }
      }
      return void 0;
    };
    var getPreviousStep = function getPreviousStep2() {
      var stepMeta = stepsMap.get(currentStep.current);
      var previousStep;
      for (var i = stepMeta.index - 1; i >= 0; i--) {
        previousStep = steps[i];
        var formState = getFormState();
        if (previousStep.relevant ? previousStep.relevant({
          formState,
          formApi,
          scope,
          relevanceDeps: previousStep.relDepsRef.current
        }) : true) {
          return previousStep.name;
        }
      }
      return void 0;
    };
    var proceed = function proceed2(nextStep, cb) {
      if (cb && typeof cb === "function") {
        var fieldState = getFieldState(currentStep.current);
        var subState = _objectSpread2(_objectSpread2({}, fieldState), {}, {
          values: fieldState.value,
          errors: fieldState.error
        });
        cb(subState).then(function() {
          currentStep.current = nextStep;
          setState(function(prev) {
            return _objectSpread2(_objectSpread2({}, prev), {}, {
              current: nextStep
            });
          });
        })["catch"](function() {
        });
      } else {
        currentStep.current = nextStep;
        setState(function(prev) {
          return _objectSpread2(_objectSpread2({}, prev), {}, {
            current: nextStep
          });
        });
      }
    };
    var next = function next2(cb) {
      var _ref2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, skip = _ref2.skip;
      var nextStep = getNextStep();
      if (nextStep) {
        if (!skip) formApi.touchAllFields();
        if (!skip) validate();
        if (!skip) asyncValidate(function() {
          return proceed(nextStep, cb);
        });
        if (skip || getFormState().valid && getFormState().validating === 0) {
          proceed(nextStep, cb);
        } else if (!getFormState().valid) {
          setState(function(prev) {
            return _objectSpread2(_objectSpread2({}, prev), {}, {
              goal: null
            });
          });
        }
      }
    };
    var previous = function previous2() {
      var previousStep = getPreviousStep();
      steps.forEach(function(step) {
        formApi.clearError(step.name);
      });
      if (previousStep) {
        currentStep.current = previousStep;
        setState(function(prev) {
          return _objectSpread2(_objectSpread2({}, prev), {}, {
            current: previousStep
          });
        });
      }
    };
    var setCurrent = function setCurrent2(step) {
      var goalIndex = stepsMap.get(step).index;
      var currIndex = stepsMap.get(currentStep.current).index;
      steps.forEach(function(step2) {
        formApi.clearError(step2.name);
      });
      if (goalIndex < currIndex) {
        currentStep.current = step;
        setState(function(prev) {
          return _objectSpread2(_objectSpread2({}, prev), {}, {
            current: step
          });
        });
      } else {
        setState(function(prev) {
          return _objectSpread2(_objectSpread2({}, prev), {}, {
            goal: step
          });
        });
      }
    };
    var metGoal = function metGoal2() {
      setState(function(prev) {
        return _objectSpread2(_objectSpread2({}, prev), {}, {
          goal: null,
          initialGoal: null
        });
      });
    };
    var getCurrentStep = function getCurrentStep2() {
      return currentStep.current;
    };
    var api = {
      register,
      deregister,
      next,
      previous,
      getNextStep,
      getPreviousStep,
      setCurrent,
      metGoal,
      getCurrentStep
    };
    if (multistepApiRef) {
      multistepApiRef.current = api;
    }
    return api;
  }, []);
  (0, import_react48.useEffect)(function() {
    var listener = function listener2() {
      setState(function(prev) {
        return _objectSpread2(_objectSpread2({}, prev), {}, {
          nextStep: multistepApi.getNextStep(),
          previousStep: multistepApi.getPreviousStep()
        });
      });
    };
    emitter.on("multistep-relevance", listener);
    return function() {
      emitter.removeListener("multistep-relevance", listener);
    };
  }, []);
  (0, import_react48.useEffect)(function() {
    if (multistepState.current) {
      setState(function(prev) {
        return _objectSpread2(_objectSpread2({}, prev), {}, {
          nextStep: multistepApi.getNextStep(),
          previousStep: multistepApi.getPreviousStep()
        });
      });
    }
  }, [multistepState.current]);
  (0, import_react48.useEffect)(function() {
    var listener = function listener2() {
      setState(function(prev) {
        return _objectSpread2(_objectSpread2({}, prev), {}, {
          goal: prev.goal || prev.initialGoal
        });
      });
    };
    emitter.on("reset", listener);
    return function() {
      emitter.removeListener("reset", listener);
    };
  }, []);
  var render = function render2(children) {
    return import_react48.default.createElement(MultistepApiContext.Provider, {
      value: multistepApi
    }, import_react48.default.createElement(MultistepStateContext.Provider, {
      value: multistepState
    }, children));
  };
  return _objectSpread2(_objectSpread2(_objectSpread2({}, multistepApi), multistepState), {}, {
    render
  });
};

// node_modules/informed/dist/esm/hooks/useMultistepStep.js
var import_react51 = __toESM(require_react(), 1);

// node_modules/informed/dist/esm/hooks/useMultistepState.js
var import_react49 = __toESM(require_react(), 1);
function useMultistepState() {
  return (0, import_react49.useContext)(MultistepStateContext);
}

// node_modules/informed/dist/esm/hooks/useMultistepApi.js
var import_react50 = __toESM(require_react(), 1);
function useMultistepApi() {
  return (0, import_react50.useContext)(MultistepApiContext);
}

// node_modules/informed/dist/esm/hooks/useMultistepStep.js
var logger8 = Debug("informed:useMultistepStep	");
var useMultistepStep = function useMultistepStep2(_ref) {
  var step = _ref.step, relevant = _ref.relevant, keepState = _ref.keepState, _ref$relevanceWhen = _ref.relevanceWhen, relevanceWhen = _ref$relevanceWhen === void 0 ? [] : _ref$relevanceWhen, _ref$relevanceDeps = _ref.relevanceDeps, relevanceDeps = _ref$relevanceDeps === void 0 ? [] : _ref$relevanceDeps;
  var formController = useFormController();
  var _useMultistepState = useMultistepState(), current = _useMultistepState.current, goal = _useMultistepState.goal;
  var _useMultistepApi = useMultistepApi(), register = _useMultistepApi.register, deregister = _useMultistepApi.deregister, next = _useMultistepApi.next, metGoal = _useMultistepApi.metGoal;
  var active = step === current;
  var relDepsRef = (0, import_react51.useRef)();
  relDepsRef.current = relevanceDeps;
  (0, import_react51.useEffect)(function() {
    register(step, {
      name: step,
      relevant,
      relDepsRef
    });
  }, []);
  var isRelevant = useRelevance({
    name: step,
    relevant,
    relevanceWhen,
    relevanceDeps
  });
  (0, import_react51.useEffect)(function() {
    if (!isRelevant && !keepState) {
      logger8("MULTISTEP RELEVNAT REMOVING", step);
      formController.remove(step);
    }
    formController.emitter.emit("multistep-relevance");
  }, [isRelevant]);
  (0, import_react51.useEffect)(function() {
    if (goal && active && goal !== step) {
      logger8("GOAL", goal, "STEP", step);
      logger8("GOING TO NEXT STEP");
      next();
    }
    if (goal && active && goal === step) {
      metGoal();
    }
  }, [goal, active]);
  (0, import_react51.useEffect)(function() {
    return function() {
      logger8("MULTISTEP REMOVING", step);
      formController.remove(step);
      deregister(step);
    };
  }, []);
  var render = function render2(children) {
    return import_react51.default.createElement(MultistepStepContext.Provider, {
      value: active
    }, import_react51.default.createElement(Scope, {
      scope: step
    }, active ? children : null));
  };
  return {
    active,
    step,
    render,
    relevant: isRelevant
  };
};

// node_modules/informed/dist/esm/components/Multistep.js
var _excluded15 = ["children"];
var _excluded22 = ["render"];
var _excluded32 = ["children"];
function Multistep(_ref) {
  var children = _ref.children, props = _objectWithoutProperties(_ref, _excluded15);
  var _useMultistep = useMultistep(props), render = _useMultistep.render, context = _objectWithoutProperties(_useMultistep, _excluded22);
  if (typeof children === "function") {
    return render(children(context));
  }
  return render(children);
}
Multistep.Step = function MultistepStep(_ref2) {
  var children = _ref2.children, props = _objectWithoutProperties(_ref2, _excluded32);
  var _useMultistepStep = useMultistepStep(props), render = _useMultistepStep.render;
  return render(children);
};

// node_modules/informed/dist/esm/components/Informed.js
var import_react52 = __toESM(require_react(), 1);
var debug9 = Debug("informed:Informed		");
var Emitter = function() {
  function Emitter2() {
    _classCallCheck(this, Emitter2);
    this.subscriptions = /* @__PURE__ */ new Map();
    this.emitter = this;
    this.on = this.on.bind(this);
    this.emit = this.emit.bind(this);
  }
  _createClass(Emitter2, [{
    key: "emit",
    value: function emit(event) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      var listeners = this.subscriptions.get(event);
      if (listeners) {
        listeners.forEach(function(listener) {
          return listener.apply(void 0, args);
        });
      }
    }
  }, {
    key: "on",
    value: function on(event, listener) {
      if (!this.subscriptions.get(event)) {
        this.subscriptions.set(event, /* @__PURE__ */ new Set());
      }
      var listeners = this.subscriptions.get(event);
      listeners.add(listener);
    }
  }, {
    key: "removeListener",
    value: function removeListener(event, listener) {
      var listeners = this.subscriptions.get(event);
      listeners["delete"](listener);
    }
  }]);
  return Emitter2;
}();
var InformedController = function() {
  function InformedController2() {
    _classCallCheck(this, InformedController2);
    this.emitter = new Emitter();
    this.formMap = /* @__PURE__ */ new Map();
    this.savedValues = /* @__PURE__ */ new Map();
    this.getController = this.getController.bind(this);
    this.register = this.register.bind(this);
    this.deregister = this.deregister.bind(this);
  }
  _createClass(InformedController2, [{
    key: "register",
    value: function register(name, controller) {
      debug9("Register", name, controller);
      if (this.formMap.get(name)) {
        this.formMap["delete"](name);
      }
      this.formMap.set(name, controller);
      this.emitter.emit(name, "_ALL_");
    }
  }, {
    key: "deregister",
    value: function deregister(name) {
      debug9("De-Register", name);
      if (this.formMap.get(name)) {
        this.formMap["delete"](name);
        this.emitter.emit(name, "_ALL_");
      }
    }
  }, {
    key: "getController",
    value: function getController(name) {
      return this.formMap.get(name);
    }
  }, {
    key: "inform",
    value: function inform(name, target) {
      this.emitter.emit(name, target);
    }
  }, {
    key: "getSavedValues",
    value: function getSavedValues(name) {
      return this.savedValues.get(name);
    }
  }, {
    key: "setSavedValues",
    value: function setSavedValues(name, values) {
      return this.savedValues.set(name, values);
    }
  }]);
  return InformedController2;
}();
var Informed = function Informed2(_ref) {
  var children = _ref.children;
  debug9("Render Informed Provider");
  var _useState = (0, import_react52.useState)(function() {
    return new InformedController();
  }), _useState2 = _slicedToArray(_useState, 1), informedController = _useState2[0];
  return import_react52.default.createElement(InformedContext.Provider, {
    value: informedController
  }, children);
};

// node_modules/informed/dist/esm/components/FormStateAccessor.js
var import_react53 = __toESM(require_react(), 1);
var FormStateAccessor = function FormStateAccessor2(_ref) {
  var children = _ref.children;
  var formState = useFormState();
  return children(formState);
};

// node_modules/informed/dist/esm/hooks/useFormStateSelector.js
var import_react54 = __toESM(require_react(), 1);

// node_modules/informed/dist/esm/structuredClone.js
var structuredCloneShim = typeof structuredClone === "function" ? structuredClone : function(obj) {
  return JSON.parse(JSON.stringify(obj));
};

// node_modules/informed/dist/esm/hooks/useFormStateSelector.js
function useFormStateSelector(selector) {
  var formController = useFormController();
  var affected = /* @__PURE__ */ new WeakMap();
  var proxyCache = (0, import_react54.useMemo)(function() {
    return /* @__PURE__ */ new WeakMap();
  }, []);
  var prevState = (0, import_react54.useRef)(structuredCloneShim(formController.state));
  var lastAffected = (0, import_react54.useRef)(affected);
  var forceUpdate = useForceUpdate();
  var selectorStateRef = (0, import_react54.useRef)(selector(createDeepProxy(prevState.current, affected, proxyCache)));
  var selectorRef = (0, import_react54.useRef)();
  selectorRef.current = selector;
  lastAffected.current = affected;
  (0, import_react54.useEffect)(function() {
    var callback = function callback2() {
      if (isDeepChanged(prevState.current, formController.state, lastAffected.current)) {
        prevState.current = structuredCloneShim(formController.state);
        selectorStateRef.current = selectorRef.current(createDeepProxy(prevState.current, affected, proxyCache));
        forceUpdate();
      }
    };
    formController.on("field", callback);
    return function() {
      formController.removeListener("field", callback);
    };
  }, []);
  return selectorStateRef.current;
}

// node_modules/informed/dist/esm/hooks/useArrayFieldState.js
var import_react55 = __toESM(require_react(), 1);
function useArrayFieldState() {
  return (0, import_react55.useContext)(ArrayFieldStateContext);
}

// node_modules/informed/dist/esm/hooks/useArrayFieldItemState.js
var import_react56 = __toESM(require_react(), 1);
function useArrayFieldItemState() {
  return (0, import_react56.useContext)(ArrayFieldItemStateContext);
}

// node_modules/informed/dist/esm/hooks/useScopedState.js
var import_react57 = __toESM(require_react(), 1);
function useScopedState() {
  var scope = (0, import_react57.useContext)(ScopeContext);
  return useFieldState(scope);
}

// node_modules/informed/dist/esm/hooks/useSubState.js
function useSubState(sub) {
  return useFieldState(sub, false);
}

// node_modules/informed/dist/esm/hooks/useInformedApi.js
var import_react58 = __toESM(require_react(), 1);
var useInformedApi = function useInformedApi2() {
  var informed = useInformed();
  var informedRef = (0, import_react58.useRef)();
  informedRef.current = informed;
  var informedApi = (0, import_react58.useMemo)(function() {
    return {
      getFormApi: function getFormApi(name) {
        var _informedRef$current$;
        return (_informedRef$current$ = informedRef.current.getController(name)) === null || _informedRef$current$ === void 0 ? void 0 : _informedRef$current$.getFormApi();
      }
    };
  }, []);
  return informedApi;
};

// node_modules/informed/dist/esm/hooks/useInformedState.js
var import_react59 = __toESM(require_react(), 1);
var debug10 = Debug("informed:useInformedState	");
var useInformedState = function useInformedState2(name) {
  var _informed$getControll;
  var informed = useInformed();
  var forceUpdate = useForceUpdate();
  (0, import_react59.useEffect)(function() {
    var listener = function listener2(n) {
      debug10("Updating", n);
      forceUpdate();
    };
    informed.emitter.on(name, listener);
    forceUpdate();
    return function() {
      informed.emitter.removeListener(name, listener);
    };
  }, [name]);
  return (_informed$getControll = informed.getController(name)) === null || _informed$getControll === void 0 ? void 0 : _informed$getControll.getFormState();
};

// node_modules/informed/dist/esm/hooks/useInformedField.js
var import_react60 = __toESM(require_react(), 1);
var debug11 = Debug("informed:useInformedField	");
var useInformedField = function useInformedField2(name, target) {
  var _informed$getControll;
  var informed = useInformed();
  var forceUpdate = useForceUpdate();
  (0, import_react60.useEffect)(function() {
    var listener = function listener2(t) {
      if (t === "_ALL_" || t === target || t && isChild(target, t)) {
        debug11("Updating", t, name, target);
        forceUpdate();
      }
    };
    informed.emitter.on(name, listener);
    forceUpdate();
    return function() {
      informed.emitter.removeListener(name, listener);
    };
  }, [name]);
  return (_informed$getControll = informed.getController(name)) === null || _informed$getControll === void 0 ? void 0 : _informed$getControll.getFieldState(target);
};
export {
  ArrayField,
  Checkbox,
  Debug3 as Debug,
  DebugField,
  Elon,
  Form,
  FormComponents,
  FormField,
  FormFields,
  FormProvider,
  FormStateAccessor,
  Informed,
  Input,
  Multistep,
  Option,
  Radio,
  RadioGroup,
  Relevant,
  SchemaFields,
  Scope,
  Select,
  TextArea,
  useArrayField,
  useArrayFieldApi,
  useArrayFieldItemApi,
  useArrayFieldItemState,
  useArrayFieldState,
  useConditional,
  useCursorPosition,
  useField,
  useFieldApi,
  useFieldState,
  useForm,
  useFormApi,
  useFormState,
  useFormStateSelector,
  useInformed,
  useInformedApi,
  useInformedField,
  useInformedState,
  useMultistepApi,
  useMultistepState,
  useRelevance,
  useScope,
  useScopedState,
  useScoper,
  useSubState,
  utils_exports as utils
};
//# sourceMappingURL=informed.js.map
